using Robust.Shared.Prototypes;

namespace Content.Shared.Procedural;

[Virtual, DataDefinition]
public partial class DungeonConfig
{
    /// <summary>
    /// The secret sauce, procedural generation layers that get run.
    /// </summary>
    [DataField]
    public List<IDunGenLayer> Layers = new();

    /// <summary>
    /// Should we reserve the tiles generated by this config so no other layers at the same level can spawn on this tile?
    /// </summary>
    [DataField]
    public bool ReserveTiles;

    /// <summary>
    /// Should we return the reserved tiles to the upper level.
    /// Set to false if you don't care if this dungeon has its tiles overwritten at higher levels.
    /// </summary>
    [DataField]
    public bool ReturnReserved = true;

    /// <summary>
    /// Minimum times to run the config.
    /// </summary>
    [DataField]
    public int MinCount = 1;

    /// <summary>
    /// Maximum times to run the config.
    /// </summary>
    [DataField]
    public int MaxCount = 1;

    /// <summary>
    /// Minimum amount we can offset the dungeon by.
    /// </summary>
    [DataField]
    public int MinOffset;

    /// <summary>
    /// Maximum amount we can offset the dungeon by.
    /// </summary>
    [DataField]
    public int MaxOffset;
}

[Prototype]
public sealed partial class DungeonConfigPrototype : DungeonConfig, IPrototype
{
    [IdDataField]
    public string ID { get; private set; } = default!;
}
