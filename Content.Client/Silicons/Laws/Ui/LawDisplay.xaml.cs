using System.Linq;
using Content.Client.Chat.Managers;
using Content.Client.Message;
using Content.Shared.Chat;
using Content.Shared.Radio;
using Content.Shared.Silicons.Laws;
using Content.Shared.Speech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class LawDisplay : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IChatManager _chatManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly EntityManager _entityManager = default!;

    private static readonly TimeSpan PressCooldown = TimeSpan.FromSeconds(3);
    private const string StateLawInLocalKey = "chat-local";

    private readonly Dictionary<string, TimeSpan> _stateLawOnCooldownUntil = [];
    private readonly Dictionary<string, Button> _stateLawButton = [];

    public LawDisplay(EntityUid uid, SiliconLaw law, HashSet<ProtoId<RadioChannelPrototype>>? radioChannels)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var identifier = law.LawIdentifierOverride ?? $"{law.Order}";
        var lawIdentifier = Loc.GetString("laws-ui-law-header", ("id", identifier));
        var lawDescription = Loc.GetString(law.ReadLawString(false));

        LawNumberLabel.SetMarkup(lawIdentifier);
        LawLabel.SetMessage(lawDescription);

        // If you can't talk, you can't state your laws...
        if (!_entityManager.TryGetComponent<SpeechComponent>(uid, out var speech) || speech.SpeechSounds is null)
            return;

        var stateLawMessage = $"{FormattedMessage.RemoveMarkupPermissive(lawIdentifier)}: {FormattedMessage.RemoveMarkupPermissive(lawDescription)}";

        var stateLawInLocalButton = NewStateLawButton("hud-chatbox-select-channel-Local", Color.DarkGray);

        stateLawInLocalButton.OnPressed += e => OnStateLawsButtonPressed(e.Button, stateLawMessage, string.Empty, StateLawInLocalKey);
        AddStateLawButton(stateLawInLocalButton, StateLawInLocalKey);

        if (radioChannels == null)
            return;

        foreach (var radioChannel in radioChannels)
        {
            if (!_prototypeManager.TryIndex<RadioChannelPrototype>(radioChannel, out var radioChannelProto))
                continue;

            var stateLawOnRadioKey = radioChannel;
            var stateLawOnRadioButton = NewStateLawButton(radioChannelProto.Name, radioChannelProto.Color);

            var channelPrefix = radioChannel == SharedChatSystem.CommonChannel
                ? SharedChatSystem.RadioCommonPrefix.ToString()
                : $"{SharedChatSystem.RadioChannelPrefix}{radioChannelProto.KeyCode}";

            stateLawOnRadioButton.OnPressed += e => OnStateLawsButtonPressed(e.Button, stateLawMessage, channelPrefix, stateLawOnRadioKey);
            AddStateLawButton(stateLawOnRadioButton, stateLawOnRadioKey);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_stateLawOnCooldownUntil.Count == 0)
            return;

        var curTime = _timing.CurTime;

        // iterate over copy of keys because we are modifying the working set
        var toCheck = _stateLawOnCooldownUntil.Keys.ToArray();
        foreach (var stateLawKey in toCheck)
        {
            if (_stateLawOnCooldownUntil[stateLawKey] > curTime)
                continue;

            _stateLawButton[stateLawKey].Disabled = false;
            _stateLawOnCooldownUntil.Remove(stateLawKey);
        }
    }

    private void OnStateLawsButtonPressed(BaseButton sender, string message, string channelPrefix, string stateLawKey)
    {
        // Send message in chat
        var chatSelectChannel = string.IsNullOrEmpty(channelPrefix) ? ChatSelectChannel.Local : ChatSelectChannel.Radio;
        _chatManager.SendMessage($"{channelPrefix} {message}", chatSelectChannel);

        // Set cooldown if any
        if (PressCooldown <= TimeSpan.Zero)
            return;

        _stateLawOnCooldownUntil[stateLawKey] = _timing.CurTime + PressCooldown;
        sender.Disabled = true;
    }

    private static Button NewStateLawButton(string locStringCaption, Color color)
    {
        return new Button
        {
            Text = Loc.GetString(locStringCaption),
            Modulate = color,
            StyleClasses = { "chatSelectorOptionButton" },
            MinHeight = 35,
            MinWidth = 75,
        };
    }

    private void AddStateLawButton(Button button, string stateLawKey)
    {
        _stateLawButton[stateLawKey] = button;
        LawAnnouncementButtons.AddChild(button);
    }
}
