using System.Linq;
using Content.Client.Chat.Managers;
using Content.Client.Message;
using Content.Shared.Chat;
using Content.Shared.Silicons.Laws;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class LawDisplay : Control
{
    [Dependency] private readonly IChatManager _chatManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private static readonly TimeSpan PressCooldown = TimeSpan.FromSeconds(3);

    public SiliconLaw Law { get; private init; }
    private readonly Dictionary<ChatChannelPrototype, TimeSpan> _stateLawOnCooldownUntil = [];

    public LawDisplay(SiliconLaw law, List<ChatChannelPrototype> chatChannels)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Law = law;

        var (lawIdentifier, lawDescription) = ReadLawstrings();
        LawNumberLabel.SetMarkup(lawIdentifier);
        LawLabel.SetMarkup(lawDescription);

        UpdateStateLawButtons(chatChannels);
    }

    public void UpdateStateLawButtons(List<ChatChannelPrototype> chatChannels, bool forceRedraw = false)
    {
        if (forceRedraw)
            RedrawStateLawButtons(chatChannels);
        else
            PatchStateLawButtons(chatChannels);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_stateLawOnCooldownUntil.Count == 0)
            return;

        var curTime = _timing.CurTime;

        // iterate over copy of keys because we are modifying the working set
        var toCheck = _stateLawOnCooldownUntil.Keys.ToArray();
        foreach (var chatChannel in toCheck)
        {
            if (_stateLawOnCooldownUntil[chatChannel] > curTime)
                continue;

            _stateLawOnCooldownUntil.Remove(chatChannel);
            EnableStateLawButton(chatChannel.Caption);
        }
    }

    /// <summary>
    /// Helper method to find and enable the button by its caption.
    /// </summary>
    private void EnableStateLawButton(string buttonText)
    {
        foreach (var control in LawAnnouncementButtons.Children)
        {
            if (control is not Button button)
                continue;

            if (button.Text == buttonText)
            {
                button.Disabled = false;
                break;
            }
        }
    }

    private void OnStateLawsButtonPressed(BaseButton sender, string message, string channelPrefix, ChatChannelPrototype chatChannel)
    {
        if (_stateLawOnCooldownUntil.ContainsKey(chatChannel))
            return;

        // Send message in chat
        var chatSelectChannel = string.IsNullOrEmpty(channelPrefix) ? ChatSelectChannel.Local : ChatSelectChannel.Radio;
        _chatManager.SendMessage($"{channelPrefix} {message}", chatSelectChannel);

        // Set cooldown if any
        if (PressCooldown <= TimeSpan.Zero)
            return;

        _stateLawOnCooldownUntil[chatChannel] = _timing.CurTime + PressCooldown;
        sender.Disabled = true;
    }

    /// <summary>
    /// Base update UI variant. Clears old state law buttons and draws new.
    /// When in doubt - use this.
    /// </summary>
    private void RedrawStateLawButtons(List<ChatChannelPrototype> chatChannels)
    {
        LawAnnouncementButtons.RemoveAllChildren();

        if (chatChannels.Count == 0)
            return;

        var (lawIdentifier, lawDescription) = ReadLawstrings();
        var stateLawMessage = $"{FormattedMessage.RemoveMarkupPermissive(lawIdentifier)}: {FormattedMessage.RemoveMarkupPermissive(lawDescription)}";

        foreach (var chatChannel in chatChannels)
            AddNewStateLawButton(stateLawMessage, chatChannel);
    }

    /// <summary>
    /// Optimized update UI variant.
    /// Calculates a net delta change and only redraws what needs to be redrawn.
    /// </summary>
    private void PatchStateLawButtons(List<ChatChannelPrototype> chatChannels)
    {
        var channelsToSeekMatchFor = new List<ChatChannelPrototype>(chatChannels);
        var validStateLawButtons = new Dictionary<ChatChannelPrototype, Button>(LawAnnouncementButtons.ChildCount);
        var nonReusableControls = new List<Control>(LawAnnouncementButtons.ChildCount);
        foreach (var lawAnnouncementButtonsChild in LawAnnouncementButtons.Children)
        {
            if (lawAnnouncementButtonsChild is not Button stateLawButton)
            {
                // Not a Button at all (what's it doing here?)
                nonReusableControls.Add(lawAnnouncementButtonsChild);
                continue;
            }

            var foundMatch = false;
            foreach (var channel in channelsToSeekMatchFor)
                if (channel.Caption == stateLawButton.Text)
                {
                    // The StateLawButton we are looking for
                    validStateLawButtons.Add(channel, stateLawButton);
                    channelsToSeekMatchFor.Remove(channel); // Stop searching among ones that we already found a match for.
                    foundMatch = true;
                    break;
                }

            if (foundMatch)
                continue;

            // Not the StateLawButton we are looking for
            nonReusableControls.Add(lawAnnouncementButtonsChild);
        }

        foreach (var nonReusableControl in nonReusableControls)
        {
            LawAnnouncementButtons.RemoveChild(nonReusableControl);
        }

        if (chatChannels.Count == 0)
            return;

        var (lawIdentifier, lawDescription) = ReadLawstrings();
        var stateLawMessage = $"{FormattedMessage.RemoveMarkupPermissive(lawIdentifier)}: {FormattedMessage.RemoveMarkupPermissive(lawDescription)}";

        for (var i = 0; i < chatChannels.Count; i++)
        {
            var chatChannel = chatChannels[i];

            if (validStateLawButtons.TryGetValue(chatChannel, out var thisStateLawButton))
                thisStateLawButton.SetPositionInParent(i);
            else
            {
                var button = AddNewStateLawButton(stateLawMessage, chatChannel);
                button.SetPositionInParent(i);
            }
        }
    }

    private Button AddNewStateLawButton(string stateLawMessage, ChatChannelPrototype chatChannel)
    {
        var button = new Button
        {
            Text = chatChannel.Caption,
            Modulate = chatChannel.Color,
            StyleClasses = { "chatSelectorOptionButton" },
            MinHeight = 35,
            MinWidth = 75,
            Disabled = _stateLawOnCooldownUntil.ContainsKey(chatChannel)
        };

        button.OnPressed += e => OnStateLawsButtonPressed(e.Button, stateLawMessage, chatChannel.ChannelPrefix, chatChannel);
        LawAnnouncementButtons.AddChild(button);
        return button;
    }

    private (string lawIdentifier, string lawDescription) ReadLawstrings() =>
        (Loc.GetString("laws-ui-law-header", ("id", Law.LawIdentifierOverride ?? $"{Law.Order}")), Loc.GetString(Law.ReadLawString(false)));
}
