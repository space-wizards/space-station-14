using Content.Client.UserInterface.Controls;
using Content.Shared.Radio;
using Content.Shared.Silicons.Laws;
using Content.Shared.Silicons.Laws.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class SiliconLawMenu : FancyWindow
{
    private EntityUid _entityUid;
    private List<SiliconLaw> _laws = [];
    private HashSet<ProtoId<RadioChannelPrototype>>? _radioChannels;

    public SiliconLawMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(EntityUid uid, SiliconLawBuiState state)
    {
        _entityUid = uid;
        _laws = state.Laws;
        _laws.Sort();
        _radioChannels = state.RadioChannels;

        UpdateLawDisplays();
    }

    public void UpdateLawDisplays()
    {
        if (!_entityUid.IsValid())
        {
            // Nothing to show until we receive first state.
            return;
        }

        LawDisplayContainer.RemoveAllChildren();

        foreach (var law in _laws)
        {
            var control = new LawDisplay(_entityUid, law, _radioChannels);

            LawDisplayContainer.AddChild(control);
        }
    }
}
