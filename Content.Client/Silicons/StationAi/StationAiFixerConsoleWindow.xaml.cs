using Content.Client.UserInterface.Controls;
using Content.Shared.Damage;
using Content.Shared.Mobs.Components;
using Content.Shared.Silicons.StationAi;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Containers;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Numerics;

namespace Content.Client.Silicons.StationAi;

[GenerateTypedNameReferences]
public sealed partial class StationAiFixerConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    private readonly SharedContainerSystem _container = default!;
    private readonly StationAiFixerConsoleSystem _stationAiFixerConsole = default!;

    private EntityUid? _owner;
    private readonly string _mindContainer = "station_ai_mind_slot";
    private readonly string _stationAiRsi = "/Textures/Mobs/Silicon/station_ai.rsi";
    private readonly string _emptyPortrait = "ai_empty";
    private readonly string _aiPortrait = "ai";

    public event Action<StationAiFixerConsoleAction>? SendStationAiFixerConsoleMessageAction;

    public StationAiFixerConsoleWindow(EntityUid owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _container = _entManager.System<SharedContainerSystem>();
        _stationAiFixerConsole = _entManager.System<StationAiFixerConsoleSystem>();

        Title = Loc.GetString("station-ai-fixer-console-window");

        _owner = owner;

        EjectButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Eject);
        RepairButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Repair);
        PurgeButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Purge);

        UpdateState();
    }

    public void OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction action)
    {
        SendStationAiFixerConsoleMessageAction?.Invoke(action);
    }

    public void UpdateState(StationAiFixerConsoleBoundUserInterfaceState? state = null)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<StationAiFixerConsoleComponent>(_owner, out var stationAiFixerConsole))
            return;

        var intellicardPresent = _stationAiFixerConsole.IsIntellicardInserted((_owner.Value, stationAiFixerConsole));
        var stationAiPresent = _stationAiFixerConsole.TryGetTarget((_owner.Value, stationAiFixerConsole), out var stationAi);

        // Update station AI labels
        StationAiNameLabel.Text = GetStationAiName(stationAi);
        StationAiStatusLabel.Text = GetStationAiStatus(stationAi);

        // Update station AI portrait
        var spriteSpecifier = new SpriteSpecifier.Rsi(new ResPath(_stationAiRsi), _emptyPortrait);

        if (stationAiPresent)
        {
            spriteSpecifier = new SpriteSpecifier.Rsi(new ResPath(_stationAiRsi), _aiPortrait);
        }

        StationAiPortraitTexture.SetFromSpriteSpecifier(spriteSpecifier);
        StationAiPortraitTexture.DisplayRect.TextureScale = new Vector2(4f, 4f);

        // Update buttons
        EjectButton.Disabled = !intellicardPresent;
        RepairButton.Disabled = !(stationAiPresent && (IsStationAiDamaged(stationAi) || !IsStationAiAlive(stationAi)));
        PurgeButton.Disabled = !stationAiPresent;
    }

    private string GetStationAiName(EntityUid? uid)
    {
        if (_entManager.TryGetComponent<MetaDataComponent>(uid, out var metadata))
        {
            return metadata.EntityName;
        }

        return Loc.GetString("station-ai-fixer-console-window-no-station-ai");
    }

    private string GetStationAiStatus(EntityUid? uid)
    {
        if (uid == null)
        {
            return Loc.GetString("station-ai-fixer-console-window-no-station-ai-status");
        }

        return IsStationAiAlive(uid) ?
            Loc.GetString("station-ai-fixer-console-window-station-ai-online") :
            Loc.GetString("station-ai-fixer-console-window-station-ai-offline");
    }

    private bool IsStationAiDamaged(EntityUid? uid)
    {
        if (_entManager.TryGetComponent<DamageableComponent>(uid, out var damageable))
        {
            return damageable.TotalDamage > 0;
        }

        return false;
    }

    private bool IsStationAiAlive(EntityUid? uid)
    {
        if (_entManager.TryGetComponent<MobStateComponent>(uid, out var mobState))
        {
            return mobState.CurrentState == Shared.Mobs.MobState.Alive;
        }

        return false;
    }
}
