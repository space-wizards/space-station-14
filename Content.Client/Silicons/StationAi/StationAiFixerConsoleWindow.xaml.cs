using Content.Client.UserInterface.Controls;
using Content.Shared.Damage;
using Content.Shared.Lock;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Silicons.StationAi;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System.Numerics;

namespace Content.Client.Silicons.StationAi;

[GenerateTypedNameReferences]
public sealed partial class StationAiFixerConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private readonly StationAiFixerConsoleSystem _stationAiFixerConsole = default!;
    private readonly SharedStationAiSystem _stationAiSystem = default!;

    private EntityUid? _owner;

    private readonly SpriteSpecifier.Rsi _emptyPortrait = new SpriteSpecifier.Rsi(new("/Textures/Mobs/Silicon/station_ai.rsi"), "ai_empty");
    private SpriteSpecifier _currentPortrait;

    public event Action<StationAiFixerConsoleAction>? SendStationAiFixerConsoleMessageAction;
    public event Action? OpenConfirmationDialogAction;

    private readonly Dictionary<MobState, Color> _statusColors = new Dictionary<MobState, Color>
    {
        [MobState.Invalid] = Color.FromHex("#757575"),
        [MobState.Alive] = Color.FromHex("#3E6C45"),
        [MobState.Critical] = Color.FromHex("#A5762F"),
        [MobState.Dead] = Color.FromHex("#BB3232"),
    };

    public StationAiFixerConsoleWindow(EntityUid owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _stationAiFixerConsole = _entManager.System<StationAiFixerConsoleSystem>();
        _stationAiSystem = _entManager.System<StationAiSystem>();

        _owner = owner;

        _currentPortrait = _emptyPortrait;
        StationAiPortraitTexture.DisplayRect.TextureScale = new Vector2(4f, 4f);

        CancelButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Cancel);
        EjectButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Eject);
        RepairButton.OnButtonDown += args => OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction.Repair);
        PurgeButton.OnButtonDown += args => OnOpenConfirmationDialog();

        UpdateState();
    }

    public void OnSendStationAiFixerConsoleMessage(StationAiFixerConsoleAction action)
    {
        SendStationAiFixerConsoleMessageAction?.Invoke(action);
    }

    public void OnOpenConfirmationDialog()
    {
        OpenConfirmationDialogAction?.Invoke();
    }

    public void UpdateState()
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<StationAiFixerConsoleComponent>(_owner, out var stationAiFixerConsole))
            return;

        var ent = (_owner.Value, stationAiFixerConsole);
        var isLocked = _entManager.TryGetComponent<LockComponent>(_owner, out var lockable) && lockable.Locked;

        // Set subscreen visibility
        LockScreen.Visible = isLocked;
        MainControls.Visible = !isLocked && !_stationAiFixerConsole.IsActionInProgress(ent);
        ActionProgressScreen.Visible = !isLocked && _stationAiFixerConsole.IsActionInProgress(ent);

        var intellicardPresent = _stationAiFixerConsole.IsStationAiHolderInserted((_owner.Value, stationAiFixerConsole));
        var stationAiPresent = _stationAiFixerConsole.TryGetTarget((_owner.Value, stationAiFixerConsole), out var stationAi) &&
            !_entManager.IsQueuedForDeletion(stationAi.Value);

        // Update station AI labels
        StationAiNameLabel.Text = GetStationAiName(stationAi);
        StationAiStatusLabel.Text = GetStationAiStatus(stationAi);

        // Update status background color
        var statusColor = _statusColors[MobState.Invalid];

        if (_entManager.TryGetComponent<MobStateComponent>(stationAi, out var mobState) && stationAiPresent)
        {
            _statusColors.TryGetValue(mobState.CurrentState, out statusColor);
        }

        StationAiStatus.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = statusColor,
        };

        // Update station AI portrait
        var portrait = _emptyPortrait;

        if (stationAiPresent &&
            _entManager.TryGetComponent<StationAiCustomizationComponent>(stationAi, out var stationAiCustomization) &&
            _stationAiSystem.TryGetCustomizedAppearanceData((stationAi.Value, stationAiCustomization), out var layerData))
        {
            var state = (mobState != null && mobState.CurrentState == MobState.Dead) ? StationAiState.Dead : StationAiState.Occupied;

            if (layerData.TryGetValue(state.ToString(), out var stateData) && stateData.RsiPath != null && stateData.State != null)
            {
                portrait = new SpriteSpecifier.Rsi(new ResPath(stateData.RsiPath), stateData.State);
            }
        }

        if (!_currentPortrait.Equals(portrait))
        {
            StationAiPortraitTexture.SetFromSpriteSpecifier(portrait);
            _currentPortrait = portrait;
        }

        // Update buttons
        EjectButton.Disabled = !intellicardPresent;
        RepairButton.Disabled = !stationAiPresent || !IsStationAiAlive(stationAi);
        PurgeButton.Disabled = !stationAiPresent;

        // Update progress bar
        if (ActionProgressScreen.Visible)
            UpdateProgressBar(ent);
    }

    public void UpdateProgressBar(Entity<StationAiFixerConsoleComponent> ent)
    {
        ActionInProgressLabel.Text = ent.Comp.ActionType == StationAiFixerConsoleAction.Repair ?
            Loc.GetString("station-ai-fixer-console-window-action-progress-repair") :
            Loc.GetString("station-ai-fixer-console-window-action-progress-purge");

        var fullTimeSpan = ent.Comp.ActionEndTime - ent.Comp.ActionStartTime;
        var remainingTimeSpan = ent.Comp.ActionEndTime - _timing.CurTime;

        var time = remainingTimeSpan.TotalSeconds > 60 ? remainingTimeSpan.TotalMinutes : remainingTimeSpan.TotalSeconds;
        var units = remainingTimeSpan.TotalSeconds > 60 ? Loc.GetString("generic-minutes") : Loc.GetString("generic-seconds");
        ActionProgressEtaLabel.Text = Loc.GetString("station-ai-fixer-console-window-action-progress-eta", ("time", (int)time), ("units", units));

        ActionProgressBar.Value = 1f - (float)remainingTimeSpan.Divide(fullTimeSpan);
    }

    private string GetStationAiName(EntityUid? uid)
    {
        if (_entManager.TryGetComponent<MetaDataComponent>(uid, out var metadata))
        {
            return metadata.EntityName;
        }

        return Loc.GetString("station-ai-fixer-console-window-no-station-ai");
    }

    private string GetStationAiStatus(EntityUid? uid)
    {
        if (uid == null)
        {
            return Loc.GetString("station-ai-fixer-console-window-no-station-ai-status");
        }

        return IsStationAiAlive(uid) ?
            Loc.GetString("station-ai-fixer-console-window-station-ai-online") :
            Loc.GetString("station-ai-fixer-console-window-station-ai-offline");
    }

    private bool IsStationAiAlive(EntityUid? uid)
    {
        if (_entManager.TryGetComponent<MobStateComponent>(uid, out var mobState))
        {
            return mobState.CurrentState == MobState.Alive;
        }

        return false;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (!ActionProgressScreen.Visible)
            return;

        if (!_entManager.TryGetComponent<StationAiFixerConsoleComponent>(_owner, out var stationAiFixerConsole))
            return;

        UpdateProgressBar((_owner.Value, stationAiFixerConsole));
    }
}
