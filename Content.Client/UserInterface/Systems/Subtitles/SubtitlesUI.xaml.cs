using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Audio.Components;
using System.Collections.Generic;
using Robust.Shared.Log;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.Subtitles;

[GenerateTypedNameReferences]
public sealed partial class SubtitlesUI : UIWidget
{
    private List<string> _displayedSounds = new();

    public SubtitlesUI()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateSounds(List<string> sounds)
    {
        var count = Math.Max(sounds.Count, _displayedSounds.Count);
        var toBeAppended = new List<string>();

        for (int i = count-1; i >= 0; i--) {
            var existing = i < _displayedSounds.Count ? _displayedSounds[i] : null;
            var incoming = i < sounds.Count ? sounds[i] : null;

            if (existing is null && incoming is not null) {
                // append excess children
                toBeAppended.Add(incoming);
            } else if (incoming is null && existing is not null) {
                // remove excess children
                _displayedSounds.RemoveAt(i);
                Subtitles.RemoveChild(i);
            } else if (incoming is not null && existing is not null && incoming != existing) {
                // patch child
                ((Label)Subtitles.GetChild(i)).Text = incoming;
                _displayedSounds[i] = incoming;
            }
        }
        toBeAppended.Reverse();
        foreach (var caption in toBeAppended) {
            _displayedSounds.Add(caption);
            Subtitles.AddChild(new Label {Text = $"{caption}"});
        }
    }
}
