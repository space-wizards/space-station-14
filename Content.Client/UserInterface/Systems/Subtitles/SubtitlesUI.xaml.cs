using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Audio.Components;
using System.Collections.Generic;
using Robust.Shared.Log;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.Subtitles;

[GenerateTypedNameReferences]
public sealed partial class SubtitlesUI : UIWidget
{
    private List<CaptionEntry> _displayedSounds = new();

    public SubtitlesUI()
    {
        RobustXamlLoader.Load(this);
    }

    private Color ModulateColor(float opacity)
    {
        return Color.White.WithAlpha(float.Lerp(1.0f, 0.3f, opacity));
    }

    public void UpdateSounds(List<CaptionEntry> sounds, TimeSpan currentTime)
    {
        var count = Math.Max(sounds.Count, _displayedSounds.Count);
        var toBeAppended = new List<CaptionEntry>();

        for (int i = count-1; i >= 0; i--) {
            var existing = i < _displayedSounds.Count ? _displayedSounds[i] : null;
            var incoming = i < sounds.Count ? sounds[i] : null;

            if (existing is null && incoming is not null) {
                // append excess children
                toBeAppended.Add(incoming);
            } else if (incoming is null && existing is not null) {
                // remove excess children
                _displayedSounds.RemoveAt(i);
                Subtitles.RemoveChild(i);
            } else if (incoming is not null && existing is not null) {
                // patch child
                var label = (Label)Subtitles.GetChild(i);
                if (incoming.DisplayText != label.Text) {
                    label.Text = incoming.DisplayText;
                }
                _displayedSounds[i] = incoming;
                label.Modulate = ModulateColor(incoming.Opacity(currentTime));
            }
        }
        toBeAppended.Reverse();
        foreach (var caption in toBeAppended) {
            _displayedSounds.Add(caption);
            var label = new Label {Text = caption.DisplayText};
            label.Modulate = ModulateColor(caption.Opacity(currentTime));
            Subtitles.AddChild(label);
        }
    }
}
