using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Controls;

/// <summary>
/// An input control for dates.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class DatePicker : Control
{
    /// <summary>
    /// Raised when <see cref="SelectedDate"> is changed.
    /// </summary>
    public event Action? OnChanged;

    /// <summary>
    /// The date currently selected by the input, or null if it's not a valid date.
    /// </summary>
    public DateTime? SelectedDate;

    /// <summary>
    /// True if a valid date is selected.
    /// </summary>
    public bool IsValid => SelectedDate is not null;

    public DatePicker()
    {
        RobustXamlLoader.Load(this);

        MonthOptionButton.AddItem(Loc.GetString("datepicker-month"), 0);
        for (var i = 1; i <= 12; i++)
        {
            MonthOptionButton.AddItem(Loc.GetString($"month-{i}"), i);
        }

        DayLineEdit.OnTextChanged += _ => Update();
        YearLineEdit.OnTextChanged += _ => Update();
        MonthOptionButton.OnItemSelected += args => {
            if (args.Id != 0)
            {
                MonthOptionButton.SelectId(args.Id);
            }
            Update();
        };
    }

    private void Update()
    {
        var monthNum = MonthOptionButton.SelectedId;

        DateTime? newDate = uint.TryParse(YearLineEdit.Text, out uint year)
            && uint.TryParse(DayLineEdit.Text, out uint day)
            && monthNum != 0
            && DateTime.TryParse($"{year}-{monthNum:00}-{day:00}", null, System.Globalization.DateTimeStyles.RoundtripKind, out var date)
            ? date
            : null;

        if (year < 1000)
        {
            // Years below 1000 are not supported, for the reason that someone could enter, say, "09" if they were born
            // in the year 2009, which would actually be interpreted as the year 9.
            newDate = null;
        }

        if (SelectedDate != newDate)
        {
            SelectedDate = newDate;
            OnChanged?.Invoke();
        }
    }
}
