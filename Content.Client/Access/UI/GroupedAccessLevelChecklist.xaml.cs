using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using System.Numerics;

namespace Content.Client.Access.UI;

[GenerateTypedNameReferences]
public sealed partial class GroupedAccessLevelChecklist : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    private bool _isMonotone;
    private string? _labelStyleClass;

    // Access data
    private HashSet<ProtoId<AccessGroupPrototype>> _accessGroups = new();
    private HashSet<ProtoId<AccessLevelPrototype>> _accessLevels = new();
    private HashSet<ProtoId<AccessLevelPrototype>> _activeAccessLevels = new();

    // Button groups
    private readonly ButtonGroup _accessGroupsButtons = new();

    // Temp values
    private int _accessGroupTabIndex = 0;
    private bool _canInteract = false;
    private List<CheckBox> _checkBoxes = new();
    private List<AccessLevelPrototype> _accessLevelsForTab = new();
    private List<AccessLevelEntry> _accessLevelEntries = new();
    private Dictionary<AccessGroupPrototype, List<AccessLevelPrototype>> _groupedAccessLevels = new();

    // Events
    private event Action<int>? OnAccessGroupChangedEvent;
    public event Action<HashSet<ProtoId<AccessLevelPrototype>>, bool>? OnAccessLevelsChangedEvent;

    /// <summary>
    /// Creates a UI control for changing access levels.
    /// Access levels are organized under a list of tabs by their associated access group.
    /// </summary>
    public GroupedAccessLevelChecklist()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        OnAccessGroupChangedEvent += OnAccessGroupChanged;
    }

    private void ArrangeAccessControls()
    {
        // Create a list of known access groups with which to populate the UI
        _groupedAccessLevels.Clear();

        foreach (var accessGroup in _accessGroups)
        {
            if (!_protoManager.TryIndex(accessGroup, out var accessGroupProto))
                continue;

            _groupedAccessLevels.Add(accessGroupProto, new());
        }

        // Ensure that the 'general' access group is added to handle
        // misc. access levels that aren't associated with any group
        if (_protoManager.TryIndex<AccessGroupPrototype>("General", out var generalAccessProto))
            _groupedAccessLevels.TryAdd(generalAccessProto, new());

        // Assign known access levels with their associated groups
        foreach (var accessLevel in _accessLevels)
        {
            if (!_protoManager.TryIndex(accessLevel, out var accessLevelProto))
                continue;

            var assigned = false;

            foreach (var (accessGroup, accessLevels) in _groupedAccessLevels)
            {
                if (!accessGroup.Tags.Contains(accessLevelProto.ID))
                    continue;

                assigned = true;
                _groupedAccessLevels[accessGroup].Add(accessLevelProto);
            }

            if (!assigned && generalAccessProto != null)
                _groupedAccessLevels[generalAccessProto].Add(accessLevelProto);
        }

        // Remove access groups that have no assigned access levels
        foreach (var (group, accessLevels) in _groupedAccessLevels)
        {
            if (accessLevels.Count == 0)
                _groupedAccessLevels.Remove(group);
        }
    }

    private bool TryRebuildAccessControls()
    {
        // No access level prototypes were assigned to any of the access level groups.
        // Either the the turret controller has no assigned access levels or their names were invalid.
        if (_groupedAccessLevels.Count == 0)
        {
            AccessGroupList.DisposeAllChildren();
            AccessLevelChecklist.DisposeAllChildren();

            return false;
        }

        // Adjust the current tab index so it remains in range
        if (_accessGroupTabIndex >= _groupedAccessLevels.Count)
            _accessGroupTabIndex = _groupedAccessLevels.Count - 1;

        // Remove excess group access buttons from the UI
        while (AccessGroupList.ChildCount > _groupedAccessLevels.Count)
            AccessGroupList.RemoveChild(_groupedAccessLevels.Count - 1);

        // Add missing group access buttons to the UI
        while (AccessGroupList.ChildCount < _groupedAccessLevels.Count)
        {
            var button = CreateAccessGroupButton();

            if (_groupedAccessLevels.Count > 1)
            {
                if (AccessGroupList.ChildCount == 0)
                    button.AddStyleClass(StyleBase.ButtonOpenLeft);
                else if (_groupedAccessLevels.Count > 1 && AccessGroupList.ChildCount == (_groupedAccessLevels.Count - 1))
                    button.AddStyleClass(StyleBase.ButtonOpenRight);
                else
                    button.AddStyleClass(StyleBase.ButtonOpenBoth);
            }

            // Add button events
            button.OnPressed += _ =>
            {
                OnAccessGroupChangedEvent?.Invoke(button.GetPositionInParent());
            };

            AccessGroupList.AddChild(button);
        }

        return true;
    }

    /// <summary>
    /// Refreshes the names and states of all the UI elements
    /// </summary>
    public void RefreshAccessControls()
    {
        if (_groupedAccessLevels.Count == 0)
            return;

        // Reorder the access groups alphabetically
        var orderedAccessGroups = _groupedAccessLevels.Keys.OrderBy(x => x.GetAccessGroupName()).ToList();

        // Update the group access buttons
        for (int i = 0; i < orderedAccessGroups.Count; i++)
        {
            if (AccessGroupList.GetChild(i) is not Button { } accessGroupButton)
                continue;

            var accessGroup = orderedAccessGroups[i];
            var prefix = _groupedAccessLevels[accessGroup].All(x => _activeAccessLevels.Contains(x)) ? "»" :
                (_groupedAccessLevels[accessGroup].Any(x => _activeAccessLevels.Contains(x)) ? "›" : " ");
            var text = Loc.GetString(
                "turret-controls-window-access-group-label",
                ("prefix", prefix),
                ("label", accessGroup.GetAccessGroupName())
            );

            if (_labelStyleClass != null)
                accessGroupButton.Label.SetOnlyStyleClass(_labelStyleClass);

            accessGroupButton.Text = text;
            accessGroupButton.Pressed = _accessGroupTabIndex == orderedAccessGroups.IndexOf(accessGroup);
        }

        // Get the access levels associated with the current tab
        _accessLevelsForTab = _groupedAccessLevels[orderedAccessGroups[_accessGroupTabIndex]];
        _accessLevelsForTab = _accessLevelsForTab.OrderBy(x => x.GetAccessLevelName()).ToList();

        // Remove excess access level buttons from the UI
        // Note: if _accessLevelsForTab is length 'n', AccessLevelChecklist should have 'n + 1' children at the end
        while (AccessLevelChecklist.ChildCount > (_accessLevelsForTab.Count + 1))
        {
            var index = AccessLevelChecklist.ChildCount - 1;

            if (AccessLevelChecklist.GetChild(AccessLevelChecklist.ChildCount - 1) is AccessLevelEntry { } accessLevelEntry)
                _accessLevelEntries.Remove(accessLevelEntry);

            AccessLevelChecklist.RemoveChild(index);
        }

        // Add an 'all' checkbox as the first child of the list if it hasn't been initalized yet
        // Toggling this checkbox on will mark all other boxes below it on/off
        if (AccessLevelChecklist.ChildCount == 0)
        {
            var checkBox = CreateAccessLevelCheckbox();
            checkBox.Text = Loc.GetString("turret-controls-window-all-checkbox");

            if (_labelStyleClass != null)
                checkBox.Label.SetOnlyStyleClass(_labelStyleClass);

            // Add checkbox events
            checkBox.OnPressed += args =>
            {
                SetCheckBoxPressedState(_checkBoxes, checkBox.Pressed);

                var accessLevels = new HashSet<ProtoId<AccessLevelPrototype>>();

                foreach (var accessLevel in _accessLevelsForTab)
                    accessLevels.Add(accessLevel);

                OnAccessLevelsChangedEvent?.Invoke(accessLevels, checkBox.Pressed);
            };

            AccessLevelChecklist.AddChild(checkBox);
        }

        // Hide the 'all' checkbox if the tab has only one access level
        var allCheckBoxVisible = _accessLevelsForTab.Count > 1;

        // The first element in the list is expected to be a checkbox
        if (AccessLevelChecklist.GetChild(0) is not CheckBox { } allCheckBox)
            return;

        allCheckBox.Visible = allCheckBoxVisible;
        allCheckBox.Disabled = !_canInteract;

        // Add any remaining missing access level buttons to the UI
        while (AccessLevelChecklist.ChildCount < (_accessLevelsForTab.Count + 1))
        {
            var accessLevelEntry = new AccessLevelEntry(_isMonotone);

            if (_labelStyleClass != null)
                accessLevelEntry.CheckBox.Label.SetOnlyStyleClass(_labelStyleClass);

            // Add checkbox events
            accessLevelEntry.CheckBox.OnPressed += args =>
            {
                // If the checkbox and its siblings are checked, check the 'all' checkbox too
                allCheckBox.Pressed = AreAllCheckBoxesPressed(_accessLevelEntries.Select(x => x.CheckBox));

                OnAccessLevelsChangedEvent?.Invoke
                    (new HashSet<ProtoId<AccessLevelPrototype>>() { accessLevelEntry.AccessLevel },
                    accessLevelEntry.CheckBox.Pressed);
            };

            AccessLevelChecklist.AddChild(accessLevelEntry);
            _accessLevelEntries.Add(accessLevelEntry);
        }

        // Update the access levels buttons' appearance
        for (int i = 0; i < _accessLevelEntries.Count; i++)
        {
            var accessLevel = _accessLevelsForTab[i];
            var accessLevelEntry = _accessLevelEntries[i];

            accessLevelEntry.AccessLevel = accessLevel;
            accessLevelEntry.CheckBox.Text = accessLevel.GetAccessLevelName();
            accessLevelEntry.CheckBox.Pressed = _activeAccessLevels.Contains(accessLevel);

            var isEndOfList = i == (_accessLevelEntries.Count - 1);

            var lines = new List<(Vector2, Vector2)>()
            {
                (new Vector2(0.5f, 0f), new Vector2(0.5f, isEndOfList ? 0.5f : 1f)),
                (new Vector2(0.5f, 0.5f), new Vector2(1f, 0.5f)),
            };

            accessLevelEntry.UpdateCheckBoxLink(lines);
            accessLevelEntry.CheckBoxLink.Visible = allCheckBoxVisible;
            accessLevelEntry.CheckBoxLink.Modulate = !_canInteract ? Color.Gray : Color.White;

            accessLevelEntry.CheckBox.Disabled = !_canInteract;
        }

        // Press the 'all' checkbox if all others are pressed
        allCheckBox.Pressed = AreAllCheckBoxesPressed(_accessLevelEntries.Select(x => x.CheckBox));
    }

    private bool AreAllCheckBoxesPressed(IEnumerable<CheckBox> checkBoxes)
    {
        foreach (var checkBox in checkBoxes)
        {
            if (!checkBox.Pressed)
                return false;
        }

        return true;
    }

    private void SetCheckBoxPressedState(IEnumerable<CheckBox> checkBoxes, bool pressed)
    {
        foreach (var checkBox in checkBoxes)
            checkBox.Pressed = pressed;
    }

    /// <summary>
    /// Provides the UI with a list of access groups with which to poplate its list of tabs.
    /// </summary>
    /// <param name="accessGroups"></param>
    public void SetAccessGroups(HashSet<ProtoId<AccessGroupPrototype>> accessGroups)
    {
        _accessGroups = accessGroups;

        ArrangeAccessControls();

        if (TryRebuildAccessControls())
            RefreshAccessControls();
    }

    /// <summary>
    /// Provides the UI with a list of access levels with which it can populate the currently selected tab.
    /// </summary>
    /// <param name="accessLevels"></param>
    public void SetAccessLevels(HashSet<ProtoId<AccessLevelPrototype>> accessLevels)
    {
        _accessLevels = accessLevels;

        ArrangeAccessControls();

        if (TryRebuildAccessControls())
            RefreshAccessControls();
    }

    /// <summary>
    /// Sets which access level checkboxes should be marked on the UI.
    /// </summary>
    public void SetActiveAccessLevels(HashSet<ProtoId<AccessLevelPrototype>> activeAccessLevels)
    {
        _activeAccessLevels = activeAccessLevels;

        RefreshAccessControls();
    }

    /// <summary>
    /// Sets whether the local player can interact with the checkboxes.
    /// </summary>
    public void SetLocalPlayerAccessibility(bool canInteract)
    {
        _canInteract = canInteract;

        RefreshAccessControls();
    }

    /// <summary>
    /// Sets whether the UI should use monotone buttons and checkboxes.
    /// </summary>
    public void SetMonotone(bool monotone)
    {
        _isMonotone = monotone;

        if (TryRebuildAccessControls())
            RefreshAccessControls();
    }

    /// <summary>
    /// Applies the specified style to the labels on the UI buttons and checkboxes.
    /// </summary>
    public void SetLabelStyleClass(string? styleClass)
    {
        _labelStyleClass = styleClass;

        RefreshAccessControls();
    }

    private void OnAccessGroupChanged(int newTabIndex)
    {
        if (newTabIndex == _accessGroupTabIndex)
            return;

        _accessGroupTabIndex = newTabIndex;

        RefreshAccessControls();
    }

    private Button CreateAccessGroupButton()
    {
        var button = _isMonotone ? new MonotoneButton() : new Button();

        button.ToggleMode = true;
        button.Group = _accessGroupsButtons;
        button.Label.HorizontalAlignment = HAlignment.Left;

        return button;
    }

    private CheckBox CreateAccessLevelCheckbox()
    {
        var checkbox = _isMonotone ? new MonotoneCheckBox() : new CheckBox();

        checkbox.Margin = new Thickness(0, 0, 0, 3);
        checkbox.ToggleMode = true;
        checkbox.ReservesSpace = false;

        return checkbox;
    }

    private sealed class AccessLevelEntry : BoxContainer
    {
        public ProtoId<AccessLevelPrototype> AccessLevel = default!;
        public CheckBox CheckBox;
        public LineRenderer CheckBoxLink;

        public AccessLevelEntry(bool monotone)
        {
            HorizontalExpand = true;

            CheckBoxLink = new LineRenderer(new())
            {
                SetWidth = 22,
                VerticalExpand = true,
                Margin = new Thickness(0, -1),
                ReservesSpace = false,
            };

            AddChild(CheckBoxLink);

            CheckBox = monotone ? new MonotoneCheckBox() : new CheckBox();
            CheckBox.ToggleMode = true;
            CheckBox.Margin = new Thickness(0f, 0f, 0f, 3f);

            AddChild(CheckBox);
        }

        public void UpdateCheckBoxLink(List<(Vector2, Vector2)> lines)
        {
            CheckBoxLink.Lines = lines;
        }
    }

    private sealed class LineRenderer : Control
    {
        /// <summary>
        /// List of lines to render (their start and end x-y coordinates).
        /// Position (0,0) is the top left corner of the control and
        /// position (1,1) is the bottom right corner.
        /// </summary>
        /// <remarks>
        /// The color of the lines is inherited from the control.
        /// </remarks>
        public List<(Vector2, Vector2)> Lines = new List<(Vector2, Vector2)>();

        public LineRenderer(List<(Vector2, Vector2)> lines = default!)
        {
            Lines = lines;
        }

        protected override void Draw(DrawingHandleScreen handle)
        {
            foreach (var line in Lines)
            {
                var start = PixelPosition +
                    new Vector2(PixelWidth * line.Item1.X, PixelHeight * line.Item1.Y);

                var end = PixelPosition +
                    new Vector2(PixelWidth * line.Item2.X, PixelHeight * line.Item2.Y);

                handle.DrawLine(start, end, ActualModulateSelf);
            }
        }
    }
}
