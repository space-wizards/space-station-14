using System.Linq;
using Content.Shared.Access;
using Content.Shared.Access.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Content.Shared.Access.Components.AccessOverriderComponent;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AccessOverriderWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _protoMan= default!;

        private readonly Dictionary<string, Button> _accessButtons = new();

        public event Action<List<ProtoId<AccessLevelPrototype>>>? OnSubmit;
        public event Action? OnItemSlotButtonPressed;

        public AccessOverriderWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            PrivilegedIdButton.OnPressed += _ => OnItemSlotButtonPressed?.Invoke();
        }

        public void SetAccessLevels(List<ProtoId<AccessLevelPrototype>> accessLevels)
        {
            _accessButtons.Clear();
            AccessLevelGrid.DisposeAllChildren();

            foreach (var access in accessLevels)
            {
                var accessLevel = _protoMan.Index(access);

                var newButton = new Button
                {
                    Text = accessLevel.GetAccessLevelName(),
                    ToggleMode = true,
                };

                AccessLevelGrid.AddChild(newButton);
                _accessButtons.Add(accessLevel.ID, newButton);

                // Iterate over the buttons dictionary, filter by `Pressed`, only get key from the key/value pair
                newButton.OnPressed += _ => OnSubmit?.Invoke(_accessButtons.Where(x => x.Value.Pressed)
                    .Select(x => new ProtoId<AccessLevelPrototype>(x.Key))
                    .ToList());
            }
        }

        public void UpdateState(string? idName,
            string? targetLabel,
            bool isAuthed,
            IEnumerable<ProtoId<AccessLevelPrototype>> missingAccess,
            List<ProtoId<AccessLevelPrototype>> currentAccess,
            List<ProtoId<AccessLevelPrototype>> possibleAccesses)
        {
            PrivilegedIdLabel.Text = idName;
            PrivilegedIdButton.Text = idName is null
                ? Loc.GetString("access-overrider-window-insert-button")
                : Loc.GetString("access-overrider-window-eject-button");

            TargetNameLabel.Text = targetLabel ?? Loc.GetString("access-overrider-window-no-target");
            TargetNameLabel.FontColorOverride = targetLabel is null ? Color.Red : Color.White;

            var missingList = string.Join(", ",
                missingAccess.Select(proto => Loc.GetString(_protoMan.Index(proto).Name ?? "generic-unknown")));

            // Honestly this isn't great UI, or least not great string
            // formatting. There's probably a visually clearer way to
            // present this.
            MissingPrivilegesText.Text = missingList == ""
                ? ""
                : Loc.GetString("access-overrider-window-missing-privileges", ("privileges", missingList));

            foreach (var (accessName, button) in _accessButtons)
            {
                button.Disabled = !isAuthed || !possibleAccesses.Contains(accessName);
                button.Pressed = isAuthed && currentAccess.Contains(accessName);
            }
        }
    }
}
