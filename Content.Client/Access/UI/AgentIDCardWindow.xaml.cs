using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;
using System.Linq;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AgentIDCardWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
        private readonly SpriteSystem _spriteSystem;

        private const int JobGroupColumnCount = 2;
        private const int NameMaxLength = 32;
        private const int JobMaxLength = 30;

        public event Action<string>? OnNameChanged;
        public event Action<string>? OnJobChanged;

        public event Action<ProtoId<JobIconPrototype>>? OnJobIconChanged;

        public AgentIDCardWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();

            NameLineEdit.OnTextEntered += e =>
            {
                OnNameChanged?.Invoke(e.Text);
                CurrentName.Text = e.Text;
            };
            NameLineEdit.OnFocusExit += e =>
            {
                OnNameChanged?.Invoke(e.Text);
                CurrentName.Text = e.Text;
            };

            JobLineEdit.OnTextEntered += e =>
            {
                OnJobChanged?.Invoke(e.Text);
                CurrentJob.Text = e.Text;
            };
            JobLineEdit.OnFocusExit += e =>
            {
                OnJobChanged?.Invoke(e.Text);
                CurrentJob.Text = e.Text;
            };

            NameLineEdit.IsValid = s => s.Length <= NameMaxLength;
            JobLineEdit.IsValid = s => s.Length <= JobMaxLength;
        }

        //TODO rename, remove currentJobIconId, summary
        public void SetAllowedIcons(string currentJobIconId, List<ProtoId<JobIconGroupPrototype>> jobGroups)
        {
            CurrentJobIcon.Texture = _spriteSystem.Frame0(_prototypeManager.Index<JobIconPrototype>(currentJobIconId).Icon);
            JobGroupGrid.DisposeAllChildren();
            IconGrid.DisposeAllChildren();

            var jobGroupButtonGroup = new ButtonGroup();
            var i = 0;

            foreach (var group in jobGroups)
            {
                if (!_prototypeManager.TryIndex<JobIconGroupPrototype>(group, out var groupProto))
                    continue;

                // Alternate button styles
                var styleBase = StyleBase.ButtonOpenBoth;
                var modulo = i % JobGroupColumnCount;
                if (modulo == 0)
                    styleBase = StyleBase.ButtonOpenRight;
                else if (modulo == JobGroupColumnCount - 1)
                    styleBase = StyleBase.ButtonOpenLeft;

                // Create new button
                var groupButton = new Button
                {
                    Access = AccessLevel.Public,
                    ToolTip = Loc.GetString(groupProto.GroupName),
                    StyleClasses = { styleBase },
                    SetSize = new Vector2(150, 28),
                    Group = jobGroupButtonGroup
                };

                // Add button texture
                if (groupProto.Sprite != null)
                {
                    var groupTexture = new TextureRect
                    {
                        Texture = _spriteSystem.Frame0(groupProto.Sprite),
                        SetSize = new Vector2(20, 20),
                        Stretch = TextureRect.StretchMode.KeepAspect
                    };
                    groupButton.AddChild(groupTexture);
                }

                // Add button label
                var groupLabel = new Label
                {
                    Text = Loc.GetString(groupProto.GroupName),
                    Margin = new Thickness(27, 0, 0, 0),
                    Align = Label.AlignMode.Center
                };
                groupButton.AddChild(groupLabel);

                // Finish button and add to UI
                groupButton.OnPressed += _ => SetJobIcons(groupProto.Icons);
                JobGroupGrid.AddChild(groupButton);
                i++;
            }
        }

        // TODO summary
        private void SetJobIcons(List<ProtoId<JobIconPrototype>> jobIcons)
        {
            IconGrid.DisposeAllChildren();

            foreach (var icon in jobIcons)
            {
                if (!_prototypeManager.TryIndex<JobIconPrototype>(icon, out var iconProto))
                    continue;

                var texture = _spriteSystem.Frame0(iconProto.Icon);

                // TODO figure out uneven pixels
                // Create new button
                var jobIconButton = new TextureButton
                {
                    TextureNormal = texture,
                    Access = AccessLevel.Public,
                    SetSize = new Vector2(30, 30),
                    ToolTip = iconProto.LocalizedJobName
                };

                // Finish button and add to UI
                jobIconButton.OnPressed += _ =>
                {
                    OnJobIconChanged?.Invoke(iconProto.ID);
                    CurrentJobIcon.Texture = texture;
                };
                IconGrid.AddChild(jobIconButton);
            }
        }

        // TODO implement checkboxes
        // TODO implement access list

        public void SetCurrentName(string name)
        {
            NameLineEdit.Text = name;
            CurrentName.Text = name;
        }

        public void SetCurrentJob(string job)
        {
            JobLineEdit.Text = job;
            CurrentJob.Text = job;
        }
    }
}
