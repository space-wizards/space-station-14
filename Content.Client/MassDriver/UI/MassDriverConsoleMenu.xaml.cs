using Content.Shared.MassDriver;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.MassDriver.UI;

[GenerateTypedNameReferences]
public sealed partial class MassDriverConsoleMenu : DefaultWindow
{
    public event Action? OnLaunchButtonPressed;
    public event Action<MassDriverMode>? OnModeButtonPressed;
    public event Action<float>? OnThrowSpeed;
    public event Action<float>? OnThrowDistance;

    /// <summary>
    /// Initializes a new instance of the <see cref="MassDriverConsoleMenu"/> class.
    /// </summary>/
    public MassDriverConsoleMenu()
    {
        RobustXamlLoader.Load(this);

        LaunchButton.OnPressed += _ => OnLaunchButtonPressed?.Invoke();

        AutoModeButton.OnPressed += _ =>
        {
            AutoModeButton.Disabled = true;
            ManualModeButton.Disabled = false;
            LaunchButton.Disabled = true;
            OnModeButtonPressed?.Invoke(MassDriverMode.Auto);
        };

        ManualModeButton.OnPressed += _ =>
        {
            AutoModeButton.Disabled = false;
            ManualModeButton.Disabled = true;
            LaunchButton.Disabled = false;
            OnModeButtonPressed?.Invoke(MassDriverMode.Manual);
        };

        ThrowDistanceSlider.OnValueChanged += _ =>
        {
            var throwDistance = Normalize(ThrowDistanceSlider.Value);
            OnThrowDistance?.Invoke(throwDistance);
            ThrowDistanceCurrentValue.Text = throwDistance.ToString() + $" {Loc.GetString("mass-driver-ui-units-distance")}";
        };

        ThrowSpeedSlider.OnValueChanged += _ =>
        {
            var throwSpeed = Normalize(ThrowSpeedSlider.Value);
            OnThrowSpeed?.Invoke(throwSpeed);
            ThrowSpeedCurrentValue.Text = throwSpeed.ToString() + $" {Loc.GetString("mass-driver-ui-units-speed")}";
        };
    }

    /// <summary>
    /// Update UI state
    /// </summary>
    public void UpdateState(MassDriverComponentState state)
    {
        if (state.Console != null)
        {
            DisabledPanel.Visible = false;
            DisabledPanel.MouseFilter = MouseFilterMode.Ignore;
        }
        else
        {
            DisabledPanel.Visible = true;
            DisabledPanel.MouseFilter = MouseFilterMode.Stop;
            if (DisabledLabel.GetMessage() is null)
            {
                var text = new FormattedMessage();
                text.AddMarkupOrThrow(Loc.GetString("mass-driver-ui-link"));
                DisabledLabel.SetMessage(text);
            }
        }

        if (state.CurrentMassDriverMode == MassDriverMode.Auto)
        {
            AutoModeButton.Disabled = true;
            ManualModeButton.Disabled = false;
            LaunchButton.Disabled = true;
        }
        else
        {
            ManualModeButton.Disabled = true;
            AutoModeButton.Disabled = false;
            LaunchButton.Disabled = false;
        }

        // Sliders Current Value Label
        ThrowDistanceCurrentValue.Text = state.CurrentThrowDistance.ToString();
        ThrowSpeedCurrentValue.Text = state.CurrentThrowSpeed.ToString() + " m/s";

        // Distance Slider Labels
        ThrowDistanceMaxValue.Text = state.MaxThrowDistance.ToString();
        ThrowDistanceMinValue.Text = state.MinThrowDistance.ToString();

        /// Speed Slider Labels
        ThrowSpeedMaxValue.Text = state.MaxThrowSpeed.ToString();
        ThrowSpeedMinValue.Text = state.MinThrowSpeed.ToString();

        // Distance Slider
        ThrowDistanceSlider.MaxValue = state.MaxThrowDistance;
        ThrowDistanceSlider.MinValue = state.MinThrowDistance;
        ThrowDistanceSlider.Value = state.CurrentThrowDistance;

        // Speed Slider
        ThrowSpeedSlider.MaxValue = state.MaxThrowSpeed;
        ThrowSpeedSlider.MinValue = state.MinThrowSpeed;
        ThrowSpeedSlider.Value = state.CurrentThrowSpeed;
    }

    private float Normalize(float value, int decimals = 1) => (float)Math.Round(value, decimals, MidpointRounding.AwayFromZero);
}
