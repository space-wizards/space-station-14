using System.Linq;
using Content.Client.ReadyManifest.UI;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;


namespace Content.Client.ReadyManifest;


[GenerateTypedNameReferences]
public sealed partial class ReadyManifestUi : DefaultWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly Dictionary<string, BoxContainer> _jobCategories;

    public ReadyManifestUi()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
        _jobCategories = [];
    }

    public void RebuildUI(Dictionary<ProtoId<JobPrototype>, int> jobCounts)
    {
        ReadyManifestListing.DisposeAllChildren();
        _jobCategories.Clear();

        var departments = new List<DepartmentPrototype>();

        foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
        {
            if (department.EditorHidden)
                continue;

            departments.Add(department);
        }

        departments.Sort(DepartmentUIComparer.Instance);

        foreach (var department in departments)
        {
            var departmentName = Loc.GetString($"department-{department.ID}");

            if (!_jobCategories.TryGetValue(department.ID, out var category))
            {
                category = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                    HorizontalExpand = true,
                    Name = department.ID
                };

                category.AddChild(new Label()
                {
                    StyleClasses = { "LabelBig" },
                    Text = Loc.GetString($"department-{department.ID}")
                });

                _jobCategories[department.ID] = category;
                ReadyManifestListing.AddChild(category);
            }

            var jobs = department.Roles.Select(jobId => _prototypeManager.Index(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();

            Array.Sort(jobs, JobUIComparer.Instance);

            foreach (var job in jobs)
            {
                category.AddChild(new ReadyManifestEntry(job, jobCounts, _prototypeManager, _spriteSystem));
            }
        }
    }
}
