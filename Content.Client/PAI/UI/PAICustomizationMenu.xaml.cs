using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.PAI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;

namespace Content.Client.PAI.UI;

[GenerateTypedNameReferences]
public sealed partial class PAICustomizationMenu : FancyWindow
{
    [Dependency] private readonly IConfigurationManager _cfgManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private PAIEmotion _currentEmotion;
    private PAIGlasses _currentGlasses;
    private EntityUid _paiEntity;
    private string _lastValidName = "";
    private int _maxNameLength;

    private readonly Dictionary<PAIEmotion, string> _emotions = new()
    {
        { PAIEmotion.Neutral, "pai-emotion-neutral" },
        { PAIEmotion.Happy, "pai-emotion-happy" },
        { PAIEmotion.Sad, "pai-emotion-sad" },
        { PAIEmotion.Angry, "pai-emotion-angry" }
    };

    private readonly Dictionary<PAIGlasses, string> _glasses = new()
    {
        { PAIGlasses.None, "pai-glasses-none" },
        { PAIGlasses.Glasses, "pai-glasses-glasses" },
        { PAIGlasses.Sunglasses, "pai-glasses-sunglasses" }
    };

    public event Action<PAIEmotion>? OnEmotionSelected;
    public event Action<PAIGlasses>? OnGlassesSelected;
    public event Action<string>? OnNameChanged;
    public event Action? OnNameReset;

    public PAICustomizationMenu(PAIEmotion currentEmotion, PAIGlasses currentGlasses, EntityUid paiEntity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _currentEmotion = currentEmotion;
        _currentGlasses = currentGlasses;
        _paiEntity = paiEntity;
        _maxNameLength = _cfgManager.GetCVar(CCVars.MaxNameLength);

        // Setup preview sprite
        PAIPreviewSprite.SetEntity(_paiEntity);

        // Setup name input
        SetupNameControls();

        // Setup emotion options
        SetupEmotionControls();

        // Setup glasses options
        SetupGlassesControls();

        // Set initial values
        UpdateCurrentName();
        EmotionOptions.TrySelectId((int)currentEmotion);
        GlassesOptions.TrySelectId((int)currentGlasses);
        UpdatePreview(currentEmotion, currentGlasses);
    }

    private void SetupNameControls()
    {
        NameLineEdit.OnTextChanged += OnNameTextChanged;
        NameLineEdit.OnTextEntered += OnNameEntered;
        NameLineEdit.OnFocusExit += OnNameFocusExit;

        ResetNameButton.OnPressed += _ => OnNameReset?.Invoke();
    }

    private void SetupEmotionControls()
    {
        foreach (var emotion in _emotions)
        {
            EmotionOptions.AddItem(Loc.GetString(emotion.Value));
        }

        EmotionOptions.OnItemSelected += idx =>
        {
            var emotion = (PAIEmotion)idx.Id;
            OnEmotionSelected?.Invoke(emotion);
            EmotionOptions.SelectId(idx.Id);
            UpdatePreview(emotion, _currentGlasses);
        };
    }

    private void SetupGlassesControls()
    {
        foreach (var glasses in _glasses)
        {
            GlassesOptions.AddItem(Loc.GetString(glasses.Value));
        }

        GlassesOptions.OnItemSelected += idx =>
        {
            var glasses = (PAIGlasses)idx.Id;
            OnGlassesSelected?.Invoke(glasses);
            GlassesOptions.SelectId(idx.Id);
            UpdatePreview(_currentEmotion, glasses);
        };
    }

    private void UpdateCurrentName()
    {
        if (_entityManager.TryGetComponent<MetaDataComponent>(_paiEntity, out var metaData))
        {
            var currentName = metaData.EntityName;
            string baseName = "";

            if (currentName.EndsWith(" (pAI)"))
            {
                baseName = currentName.Substring(0, currentName.Length - " (pAI)".Length);
            }
            else if (currentName.EndsWith("'s pAI"))
            {
                baseName = currentName.Substring(0, currentName.Length - "'s pAI".Length);
            }
            else
            {
                baseName = currentName;
            }

            NameLineEdit.Text = baseName;
            _lastValidName = baseName;
        }
    }

    private void OnNameTextChanged(LineEdit.LineEditEventArgs args)
    {
        if (args.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(args.Text) ||
            string.IsNullOrEmpty(args.Text))
        {
            return;
        }

        if (args.Text.Length > _maxNameLength)
        {
            args.Control.Text = args.Text.Substring(0, _maxNameLength);
        }

        _lastValidName = args.Control.Text;
        args.Control.Text = _lastValidName;
    }

    private void OnNameEntered(LineEdit.LineEditEventArgs args)
    {
        var trimmedName = _lastValidName.Trim();
        if (!string.IsNullOrEmpty(trimmedName))
        {
            OnNameChanged?.Invoke(trimmedName);
        }
    }

    private void OnNameFocusExit(LineEdit.LineEditEventArgs args)
    {
        if (args.Text.Length > _maxNameLength ||
            args.Text.Length == 0 ||
            string.IsNullOrWhiteSpace(args.Text) ||
            string.IsNullOrEmpty(args.Text))
        {
            args.Control.Text = _lastValidName.Trim();
        }

        var trimmedName = _lastValidName.Trim();
        if (!string.IsNullOrEmpty(trimmedName))
        {
            OnNameChanged?.Invoke(trimmedName);
        }
    }

    public void UpdateEmotion(PAIEmotion newEmotion)
    {
        if (_currentEmotion == newEmotion)
            return;

        _currentEmotion = newEmotion;
        EmotionOptions.TrySelectId((int)newEmotion);
        UpdatePreview(newEmotion, _currentGlasses);
    }

    public void UpdateGlasses(PAIGlasses newGlasses)
    {
        if (_currentGlasses == newGlasses)
            return;

        _currentGlasses = newGlasses;
        GlassesOptions.TrySelectId((int)newGlasses);
        UpdatePreview(_currentEmotion, newGlasses);
    }

    public void UpdateName(string newName)
    {
        if (NameLineEdit.Text != newName)
        {
            NameLineEdit.Text = newName;
            _lastValidName = newName;
        }
    }

    private void UpdatePreview(PAIEmotion emotion, PAIGlasses glasses)
    {
        // Preview update logic would go here
        // In the actual implementation, this would trigger sprite updates
    }
}
