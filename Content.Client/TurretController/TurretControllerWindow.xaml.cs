using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access;
using Content.Shared.Access.Systems;
using Content.Shared.TurretController;
using Content.Shared.Turrets;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;

namespace Content.Client.TurretController;

[GenerateTypedNameReferences]
public sealed partial class TurretControllerWindow : BaseWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IResourceCache _cache = default!;

    private readonly AccessReaderSystem _accessReaderSystem;

    private EntityUid? _owner;

    // Button groups
    private readonly ButtonGroup _armamentButtons = new();

    // Events
    public event Action<HashSet<ProtoId<AccessLevelPrototype>>, bool>? OnAccessLevelsChangedEvent;
    public event Action<int>? OnArmamentSettingChangedEvent;

    // Colors
    private Color[] _themeColors = [Color.FromHex("#33e633"), Color.FromHex("#dfb827"), Color.FromHex("#da2a2a")];

    public TurretControllerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _accessReaderSystem = _entManager.System<AccessReaderSystem>();

        CloseButton.OnPressed += _ => Close();

        AccessConfiguration.SetMonotone(true);

        var smallFont = _cache.NotoStack(size: 8);
        Footer.FontOverride = smallFont;
    }

    private void Initialize()
    {
        if (_owner == null)
            return;

        // Set up armament buttons
        SafeButton.OnToggled += args => OnArmamentButtonPressed(SafeButton, -1);
        StunButton.OnToggled += args => OnArmamentButtonPressed(StunButton, 0);
        LethalButton.OnToggled += args => OnArmamentButtonPressed(LethalButton, 1);

        SafeButton.Group = _armamentButtons;
        StunButton.Group = _armamentButtons;
        LethalButton.Group = _armamentButtons;

        SafeButton.Label.AddStyleClass("ConsoleText");
        StunButton.Label.AddStyleClass("ConsoleText");
        LethalButton.Label.AddStyleClass("ConsoleText");

        // Refresh UI
        RefreshLinkedTurrets(new());

        if (_entManager.TryGetComponent<DeployableTurretControllerComponent>(_owner, out var turretController))
            UpdateTheme(turretController.ArmamentState);

        if (_entManager.TryGetComponent<TurretTargetSettingsComponent>(_owner, out var turretTargetSettings))
            RefreshAccessControls(turretTargetSettings.ExemptAccessLevels);
    }

    private void OnArmamentButtonPressed(MonotoneButton pressedButton, int index)
    {
        UpdateTheme(index);
        OnArmamentSettingChangedEvent?.Invoke(index);
    }

    private void UpdateTheme(int index)
    {
        switch (index)
        {
            case -1:
                SafeButton.Pressed = true;
                break;
            case 0:
                StunButton.Pressed = true;
                break;
            case 1:
                LethalButton.Pressed = true;
                break;
        }

        var canInteract = IsLocalPlayerAllowedToInteract();

        SafeButton.Disabled = !SafeButton.Pressed && !canInteract;
        StunButton.Disabled = !StunButton.Pressed && !canInteract;
        LethalButton.Disabled = !LethalButton.Pressed && !canInteract;

        var shiftedIndex = index + 1;

        if (shiftedIndex >= 0 && shiftedIndex < _themeColors.Length)
            ContentsContainer.Modulate = _themeColors[shiftedIndex];
    }

    public void SetOwner(EntityUid owner)
    {
        _owner = owner;

        Initialize();
    }

    public void UpdateState(DeployableTurretControllerBoundInterfaceState state)
    {
        if (_entManager.TryGetComponent<DeployableTurretControllerComponent>(_owner, out var turretController))
            UpdateTheme(turretController.ArmamentState);

        if (_entManager.TryGetComponent<TurretTargetSettingsComponent>(_owner, out var turretTargetSettings))
            RefreshAccessControls(turretTargetSettings.ExemptAccessLevels);

        RefreshLinkedTurrets(state.TurretStateByAddress);
    }

    public void RefreshLinkedTurrets(Dictionary<string, string> turretStates)
    {
        var turretCount = turretStates.Count;
        var hasTurrets = turretCount > 0;

        NoLinkedTurretsText.Visible = !hasTurrets;
        LinkedTurretsContainer.Visible = hasTurrets;

        LinkedTurretsContainer.RemoveAllChildren();

        foreach (var (address, state) in turretStates)
        {
            var text = Loc.GetString(
                "turret-controls-window-turret-status",
                ("device", address),
                ("status", Loc.GetString(state))
            );

            var label = new Label()
            {
                Text = text,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(10f, 0f, 10f, 0f),
                HorizontalExpand = true,
                SetHeight = 20f,
            };

            label.AddStyleClass("ConsoleText");

            LinkedTurretsContainer.AddChild(label);
        }

        TurretStatusHeader.Text = Loc.GetString("turret-controls-window-turret-status-label", ("count", turretCount));
    }

    public void RefreshAccessControls(HashSet<ProtoId<AccessLevelPrototype>> exemptAccessLevels)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<DeployableTurretControllerComponent>(_owner, out var turretControls))
            return;

        AccessConfiguration.SetAccessGroups(turretControls.AccessGroups);
        AccessConfiguration.SetAccessLevels(turretControls.AccessLevels);
        AccessConfiguration.SetAccessExemptions(exemptAccessLevels);
        AccessConfiguration.SetLocalPlayerAccessibility(IsLocalPlayerAllowedToInteract());
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }

    private bool IsLocalPlayerAllowedToInteract()
    {
        if (_owner == null || _playerManager.LocalSession?.AttachedEntity == null)
            return false;

        return _accessReaderSystem.IsAllowed(_playerManager.LocalSession.AttachedEntity.Value, _owner.Value);
    }
}
