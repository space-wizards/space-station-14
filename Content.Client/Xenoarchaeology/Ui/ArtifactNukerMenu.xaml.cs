using Content.Client.UserInterface.Controls;
using Content.Shared.Xenoarchaeology.Equipment.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Text;
using Content.Client.Message;
using Content.Client.Resources;
using Content.Client.Xenoarchaeology.Artifact;
using Content.Client.Xenoarchaeology.Equipment;
using Content.Shared.Xenoarchaeology.Artifact.Components;
using Robust.Client.Audio;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Shared.Audio;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Xenoarchaeology.Ui;

[GenerateTypedNameReferences]
public sealed partial class ArtifactNukerMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private readonly ArtifactAnalyzerSystem _artifactAnalyzer;
    private readonly XenoArtifactSystem _xenoArtifact;
    private readonly MetaDataSystem _meta = default!;

    private Entity<AnalysisConsoleComponent> _owner;
    private Entity<XenoArtifactNodeComponent>? _currentNode;

    private TimeSpan? _hideExtractInfoIn;

    public event Action? OnServerSelectionButtonPressed;
    public event Action? OnExtractButtonPressed;

    public ArtifactNukerMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _xenoArtifact = _ent.System<XenoArtifactSystem>();
        _artifactAnalyzer = _ent.System<ArtifactAnalyzerSystem>();
        _meta = _ent.System<MetaDataSystem>();

        GraphControl.OnNodeSelected += node =>
        {
            _currentNode = node;
            SetSelectedNode(node);
        };
    }

    /// <summary>
    /// Set entity that corresponds analysis console, for which window is opened.
    /// Closes window if <see cref="AnalysisConsoleComponent"/> is not present on entity.
    /// </summary>
    public void SetOwner(EntityUid owner)
    {
        if (!_ent.TryGetComponent<AnalysisConsoleComponent>(owner, out var comp))
        {
            Close();
            return;
        }

        _owner = (owner, comp);
        Update(_owner);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_hideExtractInfoIn == null || _timing.CurTime + _meta.GetPauseTime(_owner) < _hideExtractInfoIn)
            return;

        _hideExtractInfoIn = null;
    }

    public void Update(Entity<AnalysisConsoleComponent> ent)
    {
        _artifactAnalyzer.TryGetArtifactFromConsole(ent, out var arti);
        GraphControl.SetArtifact(arti);

        NoArtiLabel.Visible = true;
        if (!_artifactAnalyzer.TryGetAnalyzer(ent, out _))
            NoArtiLabel.Text = Loc.GetString("analysis-console-info-no-scanner");
        else if (arti == null)
            NoArtiLabel.Text = Loc.GetString("analysis-console-info-no-artifact");
        else
            NoArtiLabel.Visible = false;

        if (_currentNode == null
            || arti == null
            || !_xenoArtifact.TryGetIndex((arti.Value, arti.Value), _currentNode.Value, out _))
        {
            SetSelectedNode(null);
        }
    }

    public void SetSelectedNode(Entity<XenoArtifactNodeComponent>? node)
    {
        if (!_artifactAnalyzer.TryGetArtifactFromConsole(_owner, out var artifact))
            return;

        if (node == null)
            return;
    }
}
