using Content.Client.UserInterface.Controls;
using Content.Shared.Clothing.Components;
using Content.Shared.Clothing.EntitySystems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Numerics;

namespace Content.Client.Clothing.UI;

[GenerateTypedNameReferences]
public sealed partial class HailerRadialMenu : RadialMenu
{
    public event Action<int>? OnOrderPicked;

    public HailerRadialMenu(EntityUid owner, IEntityManager entMan, IPlayerManager playerMan, SharedHailerSystem hailer, SpriteSystem sprite)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var ent = (owner, entMan.GetComponent<HailerComponent>(owner));
        if (playerMan.LocalSession?.AttachedEntity is not { } user)
            return;

        var lines = ent.Item2.Orders;
        for (var i = 0; i < lines.Count; i++)
        {
            var line = lines[i];
            var tooltip = line.Description;
            var button = new RadialMenuButton()
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = tooltip
            };
            if (line.Icon != null)
            {
                var tex = new TextureRect()
                {
                    VerticalAlignment = VAlignment.Center,
                    HorizontalAlignment = HAlignment.Center,
                    Texture = sprite.Frame0(line.Icon),
                    TextureScale = new Vector2(2f, 2f),
                };

                button.AddChild(tex);
            }
            var orderIndex = i;
            button.OnButtonUp += _ => OnOrderPicked?.Invoke(orderIndex);

            Container.AddChild(button);
        }
    }
}
