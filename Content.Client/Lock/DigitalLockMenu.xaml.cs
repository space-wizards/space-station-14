using System;
using Content.Shared.Lock;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Lock;

[GenerateTypedNameReferences]
public sealed partial class DigitalLockMenu : DefaultWindow
{
    public event Action<int>? OnKeypadButtonPressed;
    public event Action? OnClearButtonPressed;
    public event Action? OnEnterButtonPressed;

    public DigitalLockMenu()
    {
        RobustXamlLoader.Load(this);
        FillKeypadGrid();
    }

    /// <summary>
    ///     Fill keypad buttons in keypad grid
    /// </summary>
    private void FillKeypadGrid()
    {
        // add 3 rows of keypad buttons (1-9)
        for (var i = 1; i <= 9; i++)
            AddKeypadButton(i.ToString(), OnKeypadButtonPressed, i);

        // clear button
        AddKeypadButton("C", OnClearButtonPressed);

        // zero button
        AddKeypadButton("0", OnKeypadButtonPressed, 0);

        // enter button
        AddKeypadButton("E", OnEnterButtonPressed);
    }

    /// <summary>
    /// Adds button with name.
    /// </summary>
    /// <param name="name">Name of button</param>
    /// <param name="action">Action to invoke</param>
    private void AddKeypadButton(string name, Action? action)
    {
        var btn = new Button() { Text = name };
        btn.OnPressed += _ => action?.Invoke();
        KeypadGrid.AddChild(btn);
    }

    /// <summary>
    /// Adds button with name and number to invoke.
    /// </summary>
    /// <param name="name">Name of button</param>
    /// <param name="action">Action to invoke</param>
    /// <param name="number">Number to invoke</param>
    private void AddKeypadButton(string name, Action<int>? action, int number)
    {
        var btn = new Button() { Text = name };
        btn.OnPressed += _ => action?.Invoke(number);
        KeypadGrid.AddChild(btn);
    }

    /// <summary>
    /// Updates Menu State
    /// </summary>
    /// <param name="state">UI State</param>
    public void UpdateState(DigitalLockUiState state)
    {
        string firstMsg, secondMsg;

        switch (state.Status)
        {
            case DigitalLockStatus.AWAIT_CODE:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-input-code");
                secondMsg = Loc.GetString("digital-lock-interface-second-status-current-code",
                    ("code", VisualizeCode(state.EnteredCodeLength, state.MaxCodeLength)));
                break;
            case DigitalLockStatus.AWAIT_CONFIRMATION:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-confirm-code");
                secondMsg = Loc.GetString("digital-lock-interface-second-status-current-code",
                    ("code", VisualizeCode(state.EnteredCodeLength, state.MaxCodeLength)));
                break;
            case DigitalLockStatus.OPENED:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-lock-opened");
                secondMsg = "";
                break;
            case DigitalLockStatus.CHANGE_MODE_CONFIRMATION:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-changemode-confirmation");
                secondMsg = Loc.GetString("digital-lock-interface-second-status-changemode-confirmation");
                break;
            case DigitalLockStatus.CHANGE_MODE_CANCEL_CONFIRMATION:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-changemode-cancel-confirmation");
                secondMsg = Loc.GetString("digital-lock-interface-second-status-changemode-confirmation");
                break;
            case DigitalLockStatus.CHANGE_MODE_CODE:
                firstMsg = Loc.GetString("digital-lock-interface-first-status-input-code");
                secondMsg = Loc.GetString("digital-lock-interface-second-status-current-code",
                    ("code", VisualizeCode(state.EnteredCodeLength, state.MaxCodeLength)));
                break;
            default:
                // shouldn't normally be here
                firstMsg = Loc.GetString("digital-lock-interface-status-error");
                secondMsg = Loc.GetString("digital-lock-interface-status-error");
                break;
        }

        FirstStatusLabel.Text = firstMsg;
        SecondStatusLabel.Text = secondMsg;
    }

    /// <summary>
    /// Visualize code, _ for empty space, * for entered
    /// </summary>
    /// <param name="codeLength">Lenght of Code</param>
    /// <param name="maxLength">Max Lenght</param>
    /// <returns></returns>
    private string VisualizeCode(int codeLength, int maxLength)
    {
        var code = new string('*', codeLength);
        var blanksCount = maxLength - codeLength;
        var blanks = new string('_', blanksCount);
        return code + blanks;
    }
}