using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Content.Client.Items;

namespace Content.Client.Mech.Ui;

/// <summary>
/// Control for displaying individual mech equipment items in the UI.
/// </summary>
/// <seealso cref="MechMenu"/>
[GenerateTypedNameReferences]
public sealed partial class MechEquipmentControl : Control
{
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;

    public event Action? OnRemoveButtonPressed;
    public EntityUid Entity { get; private set; }

    public MechEquipmentControl(EntityUid entity, string itemName, Control? fragment, int size)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InitializeControl(entity, itemName, fragment, size);
    }

    public void SetRemoveDisabled(bool disabled)
    {
        RemoveButton.Disabled = disabled;
        RemoveButton.ToolTip = disabled
            ? _loc.GetString("mech-remove-disabled-tooltip")
            : null;

        RemoveButton.Modulate = disabled
            ? new Color(0.5f, 0.5f, 0.5f, 1f)
            : Color.White;
    }

    public void UpdateControl(string itemName, Control? fragment, int size)
    {
        SetContent(itemName, fragment, size);
    }

    private void InitializeControl(EntityUid entity, string itemName, Control? fragment, int size)
    {
        Entity = entity;

        // Set equipment information
        SetContent(itemName, fragment, size);
        EquipmentView.SetEntity(entity);

        // Configure remove button
        RemoveButton.TexturePath = "/Textures/Interface/Nano/cross.svg.png";
        SetRemoveDisabled(true);

        // Wire up events
        RemoveButton.OnPressed += _ => OnRemoveButtonPressed?.Invoke();
    }

    private void AddChildWithMargins(Control child)
    {
        child.Margin = new Thickness(3);
        CustomControlContainer.AddChild(child);
    }

    private void SetContent(string itemName, Control? fragment, int size)
    {
        // Set equipment information
        EquipmentName.SetMessage(itemName);
        EquipmentSize.Text = $"[{size}]";

        // Update fragment if provided
        CustomControlContainer.Children.Clear();
        var showContainer = false;
        if (fragment != null)
        {
            showContainer = true;
            AddChildWithMargins(fragment);
        }

        // Try to collect item status controls for this equipment
        var status = new ItemStatusCollectMessage();
        _entMan.EventBus.RaiseLocalEvent(Entity, status);
        foreach (var control in status.Controls)
        {
            showContainer = true;
            AddChildWithMargins(control);
        }

        CustomControlContainer.Visible = showContainer;
        Separator.Visible = showContainer;
    }
}
