using Content.Client.Stylesheets;
using Content.Shared.CCVar;
using Content.Shared.Input;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.Input;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Options.UI.Tabs
{
    [GenerateTypedNameReferences]
    public sealed partial class KeyRebindTab : Control
    {
        // List of key functions that must be registered as toggle instead.
        private static readonly HashSet<BoundKeyFunction> ToggleFunctions = new()
        {
            EngineKeyFunctions.ShowDebugMonitors,
            EngineKeyFunctions.HideUI,
        };

        [Dependency] private readonly IInputManager _inputManager = default!;
        [Dependency] private readonly IConfigurationManager _cfg = default!;

        private IKeyBindArguments? _currentlyRebinding;
        private bool _isFirstHeader = true;

        private readonly Dictionary<BoundKeyFunction, IKeyBindingControl> _keyControls = new();

        private readonly List<Action> _deferCommands = new();

        public KeyRebindTab()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            ResetAllButton.OnPressed += _ =>
            {
                _deferCommands.Add(() =>
                {
                    // Reset all bindings in the input manager
                    _inputManager.ResetAllBindings();

                    // Save changes
                    _inputManager.SaveToUserData();
                });
            };
            AddCustomBindingButton.OnPressed += AddCustomBindingControl;

            #region Fill key functions list

            AddHeader("ui-options-header-general");
            AddCheckBox("ui-options-hotkey-keymap", _cfg.GetCVar(CVars.DisplayUSQWERTYHotkeys), HandleToggleUSQWERTYCheckbox);

            AddHeader("ui-options-header-movement");
            AddButton(EngineKeyFunctions.MoveUp);
            AddButton(EngineKeyFunctions.MoveLeft);
            AddButton(EngineKeyFunctions.MoveDown);
            AddButton(EngineKeyFunctions.MoveRight);
            AddButton(EngineKeyFunctions.Walk);
            AddCheckBox("ui-options-hotkey-toggle-walk", _cfg.GetCVar(CCVars.ToggleWalk), HandleToggleWalk);
            InitToggleWalk();
            AddButton(ContentKeyFunctions.ToggleKnockdown);

            AddHeader("ui-options-header-camera");
            AddButton(EngineKeyFunctions.CameraRotateLeft);
            AddButton(EngineKeyFunctions.CameraRotateRight);
            AddButton(EngineKeyFunctions.CameraReset);
            AddButton(ContentKeyFunctions.ZoomIn);
            AddButton(ContentKeyFunctions.ZoomOut);
            AddButton(ContentKeyFunctions.ResetZoom);

            AddHeader("ui-options-header-interaction-basic");
            AddButton(EngineKeyFunctions.Use);
            AddButton(EngineKeyFunctions.UseSecondary);
            AddButton(ContentKeyFunctions.UseItemInHand);
            AddButton(ContentKeyFunctions.AltUseItemInHand);
            AddButton(ContentKeyFunctions.ActivateItemInWorld);
            AddButton(ContentKeyFunctions.AltActivateItemInWorld);
            AddButton(ContentKeyFunctions.Drop);
            AddButton(ContentKeyFunctions.ExamineEntity);
            AddButton(ContentKeyFunctions.SwapHands);
            AddButton(ContentKeyFunctions.SwapHandsReverse);
            AddButton(ContentKeyFunctions.MoveStoredItem);
            AddButton(ContentKeyFunctions.RotateStoredItem);
            AddButton(ContentKeyFunctions.SaveItemLocation);

            AddHeader("ui-options-header-interaction-adv");
            AddButton(ContentKeyFunctions.SmartEquipBackpack);
            AddButton(ContentKeyFunctions.SmartEquipBelt);
            AddButton(ContentKeyFunctions.SmartEquipPocket1);
            AddButton(ContentKeyFunctions.SmartEquipPocket2);
            AddButton(ContentKeyFunctions.SmartEquipSuitStorage);
            AddButton(ContentKeyFunctions.OpenBackpack);
            AddButton(ContentKeyFunctions.OpenBelt);
            AddButton(ContentKeyFunctions.ThrowItemInHand);
            AddButton(ContentKeyFunctions.TryPullObject);
            AddButton(ContentKeyFunctions.MovePulledObject);
            AddButton(ContentKeyFunctions.ReleasePulledObject);
            AddButton(ContentKeyFunctions.Point);
            AddButton(ContentKeyFunctions.RotateObjectClockwise);
            AddButton(ContentKeyFunctions.RotateObjectCounterclockwise);
            AddButton(ContentKeyFunctions.FlipObject);

            AddHeader("ui-options-header-ui");
            AddButton(ContentKeyFunctions.FocusChat);
            AddButton(ContentKeyFunctions.FocusLocalChat);
            AddButton(ContentKeyFunctions.FocusEmote);
            AddButton(ContentKeyFunctions.FocusWhisperChat);
            AddButton(ContentKeyFunctions.FocusRadio);
            AddButton(ContentKeyFunctions.FocusLOOC);
            AddButton(ContentKeyFunctions.FocusOOC);
            AddButton(ContentKeyFunctions.FocusAdminChat);
            AddButton(ContentKeyFunctions.FocusDeadChat);
            AddButton(ContentKeyFunctions.FocusConsoleChat);
            AddButton(ContentKeyFunctions.CycleChatChannelForward);
            AddButton(ContentKeyFunctions.CycleChatChannelBackward);
            AddButton(ContentKeyFunctions.OpenCharacterMenu);
            AddButton(ContentKeyFunctions.OpenCraftingMenu);
            AddButton(ContentKeyFunctions.OpenGuidebook);
            AddButton(ContentKeyFunctions.OpenInventoryMenu);
            AddButton(ContentKeyFunctions.OpenAHelp);
            AddButton(ContentKeyFunctions.OpenActionsMenu);
            AddButton(ContentKeyFunctions.OpenEmotesMenu);
            AddButton(ContentKeyFunctions.ToggleRoundEndSummaryWindow);
            AddButton(ContentKeyFunctions.OpenEntitySpawnWindow);
            AddButton(ContentKeyFunctions.OpenSandboxWindow);
            AddButton(ContentKeyFunctions.OpenTileSpawnWindow);
            AddButton(ContentKeyFunctions.OpenDecalSpawnWindow);
            AddButton(ContentKeyFunctions.OpenAdminMenu);
            AddButton(EngineKeyFunctions.WindowCloseAll);
            AddButton(EngineKeyFunctions.WindowCloseRecent);
            AddButton(EngineKeyFunctions.EscapeMenu);
            AddButton(ContentKeyFunctions.EscapeContext);

            AddHeader("ui-options-header-misc");
            AddButton(ContentKeyFunctions.TakeScreenshot);
            AddButton(ContentKeyFunctions.TakeScreenshotNoUI);
            AddButton(ContentKeyFunctions.ToggleFullscreen);

            AddHeader("ui-options-header-hotbar");
            foreach (var boundKey in ContentKeyFunctions.GetHotbarBoundKeys())
            {
                AddButton(boundKey);
            }

            AddHeader("ui-options-header-shuttle");
            AddButton(ContentKeyFunctions.ShuttleStrafeUp);
            AddButton(ContentKeyFunctions.ShuttleStrafeRight);
            AddButton(ContentKeyFunctions.ShuttleStrafeLeft);
            AddButton(ContentKeyFunctions.ShuttleStrafeDown);
            AddButton(ContentKeyFunctions.ShuttleRotateLeft);
            AddButton(ContentKeyFunctions.ShuttleRotateRight);
            AddButton(ContentKeyFunctions.ShuttleBrake);

            AddHeader("ui-options-header-map-editor");
            AddButton(EngineKeyFunctions.EditorPlaceObject);
            AddButton(EngineKeyFunctions.EditorCancelPlace);
            AddButton(EngineKeyFunctions.EditorGridPlace);
            AddButton(EngineKeyFunctions.EditorLinePlace);
            AddButton(EngineKeyFunctions.EditorRotateObject);
            AddButton(ContentKeyFunctions.EditorFlipObject);
            AddButton(ContentKeyFunctions.EditorCopyObject);

            AddHeader("ui-options-header-dev");
            AddButton(EngineKeyFunctions.ShowDebugConsole);
            AddButton(EngineKeyFunctions.ShowDebugMonitors);
            AddButton(EngineKeyFunctions.HideUI);
            AddButton(ContentKeyFunctions.InspectEntity);

            AddHeader("ui-options-header-text-cursor");
            AddButton(EngineKeyFunctions.TextCursorLeft);
            AddButton(EngineKeyFunctions.TextCursorRight);
            AddButton(EngineKeyFunctions.TextCursorUp);
            AddButton(EngineKeyFunctions.TextCursorDown);
            AddButton(EngineKeyFunctions.TextCursorWordLeft);
            AddButton(EngineKeyFunctions.TextCursorWordRight);
            AddButton(EngineKeyFunctions.TextCursorBegin);
            AddButton(EngineKeyFunctions.TextCursorEnd);

            AddHeader("ui-options-header-text-cursor-select");
            AddButton(EngineKeyFunctions.TextCursorSelect);
            AddButton(EngineKeyFunctions.TextCursorSelectLeft);
            AddButton(EngineKeyFunctions.TextCursorSelectRight);
            AddButton(EngineKeyFunctions.TextCursorSelectUp);
            AddButton(EngineKeyFunctions.TextCursorSelectDown);
            AddButton(EngineKeyFunctions.TextCursorSelectWordLeft);
            AddButton(EngineKeyFunctions.TextCursorSelectWordRight);
            AddButton(EngineKeyFunctions.TextCursorSelectBegin);
            AddButton(EngineKeyFunctions.TextCursorSelectEnd);

            AddHeader("ui-options-header-text-edit");
            AddButton(EngineKeyFunctions.TextBackspace);
            AddButton(EngineKeyFunctions.TextDelete);
            AddButton(EngineKeyFunctions.TextWordBackspace);
            AddButton(EngineKeyFunctions.TextWordDelete);
            AddButton(EngineKeyFunctions.TextNewline);
            AddButton(EngineKeyFunctions.TextSubmit);
            AddButton(EngineKeyFunctions.MultilineTextSubmit);
            AddButton(EngineKeyFunctions.TextSelectAll);
            AddButton(EngineKeyFunctions.TextCopy);
            AddButton(EngineKeyFunctions.TextCut);
            AddButton(EngineKeyFunctions.TextPaste);

            AddHeader("ui-options-header-text-chat");
            AddButton(EngineKeyFunctions.TextHistoryPrev);
            AddButton(EngineKeyFunctions.TextHistoryNext);
            AddButton(EngineKeyFunctions.TextReleaseFocus);
            AddButton(EngineKeyFunctions.TextScrollToBottom);

            AddHeader("ui-options-header-text-other");
            AddButton(EngineKeyFunctions.TextTabComplete);
            AddButton(EngineKeyFunctions.TextCompleteNext);
            AddButton(EngineKeyFunctions.TextCompletePrev);

            foreach (var function in _inputManager.GetCustomCommands())
            {
                if(_inputManager.TryGetKeyBinding(function, out var keyBinding))
                    AddCustomBindingControl(function, keyBinding);
            }

            foreach (var (function, control) in _keyControls)
            {
                UpdateBindingsData(function, control);
            }
            #endregion
        }

        private void HandleToggleUSQWERTYCheckbox(BaseButton.ButtonToggledEventArgs args)
        {
            _cfg.SetCVar(CVars.DisplayUSQWERTYHotkeys, args.Pressed);
            _cfg.SaveToFile();
        }

        private void InitToggleWalk()
        {
            if (_cfg.GetCVar(CCVars.ToggleWalk))
            {
                ToggleFunctions.Add(EngineKeyFunctions.Walk);
            }
            else
            {
                ToggleFunctions.Remove(EngineKeyFunctions.Walk);
            }
        }

        private void HandleToggleWalk(BaseButton.ButtonToggledEventArgs args)
        {
            _cfg.SetCVar(CCVars.ToggleWalk, args.Pressed);
            _cfg.SaveToFile();
            InitToggleWalk();

            if (!_keyControls.TryGetValue(EngineKeyFunctions.Walk, out var keyControl))
            {
                return;
            }

            var bindingType = args.Pressed ? KeyBindingType.Toggle : KeyBindingType.State;
            for (var i = 0; i <= 1; i++)
            {
                var binding = i == 0
                    ? keyControl.Bind1
                    : keyControl.Bind2;
                if (binding == null)
                {
                    continue;
                }

                var registration = new KeyBindingRegistration
                {
                    Function = EngineKeyFunctions.Walk,
                    BaseKey = binding.BaseKey,
                    Mod1 = binding.Mod1,
                    Mod2 = binding.Mod2,
                    Mod3 = binding.Mod3,
                    Priority = binding.Priority,
                    Type = bindingType,
                    CanFocus = binding.CanFocus,
                    CanRepeat = binding.CanRepeat,
                };

                _deferCommands.Add(() =>
                {
                    _inputManager.RemoveBinding(binding);
                    _inputManager.RegisterBinding(registration);
                });
            }

            _deferCommands.Add(_inputManager.SaveToUserData);
        }

        #region Append list element methods

        private void AddHeader(string headerContents)
        {
            var control = new Label
            {
                Text = Loc.GetString(headerContents),
                FontColorOverride = StyleNano.NanoGold,
                StyleClasses = { StyleNano.StyleClassLabelKeyText },
            };
            if (!_isFirstHeader)
            {
                control.Margin = new Thickness(0, 8);
            }

            KeybindsContainer.AddChild(control);
            _isFirstHeader = false;
        }

        private void AddButton(BoundKeyFunction function)
        {
            var control = new KeyControl
            {
                Function = function,
                OnBind = RebindButtonPressed,
                OnReset = () =>
                {
                    _deferCommands.Add(() =>
                    {
                        _inputManager.ResetBindingsFor(function);
                        _inputManager.SaveToUserData();
                    });
                },
                ButtonOnKeyBindingDown = (args, binding) =>
                {
                    if (args.Function == EngineKeyFunctions.UIRightClick && binding != null)
                    {
                        _deferCommands.Add(() =>
                        {
                            _inputManager.RemoveBinding(binding);
                            _inputManager.SaveToUserData();
                        });

                        args.Handle();
                    }
                }
            };

            KeybindsContainer.AddChild(control);
            _keyControls.Add(function, control);
        }

        private void AddCheckBox(
            string checkBoxName,
            bool currentState,
            Action<BaseButton.ButtonToggledEventArgs>? callBackOnClick
        )
        {
            var newCheckBox = new CheckBox
            {
                Text = Loc.GetString(checkBoxName)
            };
            newCheckBox.Pressed = currentState;
            newCheckBox.OnToggled += callBackOnClick;

            KeybindsContainer.AddChild(newCheckBox);
        }

        #endregion

        protected override void EnteredTree()
        {
            base.EnteredTree();

            _inputManager.FirstChanceOnKeyEvent += InputManagerOnFirstChanceOnKeyEvent;
            _inputManager.OnKeyBindingAdded += OnKeyBindAdded;
            _inputManager.OnKeyBindingRemoved += OnKeyBindRemoved;
            _inputManager.OnInputModeChanged += UpdateKeyControlBindText;
        }

        protected override void ExitedTree()
        {
            base.ExitedTree();

            _inputManager.FirstChanceOnKeyEvent -= InputManagerOnFirstChanceOnKeyEvent;
            _inputManager.OnKeyBindingAdded -= OnKeyBindAdded;
            _inputManager.OnKeyBindingRemoved -= OnKeyBindRemoved;
            _inputManager.OnInputModeChanged -= UpdateKeyControlBindText;
        }

        private void OnKeyBindRemoved(IKeyBinding obj)
        {
            OnKeyBindModified(obj, true);
        }

        private void OnKeyBindAdded(IKeyBinding obj)
        {
            OnKeyBindModified(obj, false);
        }

        private void OnKeyBindModified(IKeyBinding bind, bool removal)
        {
            if (!_keyControls.TryGetValue(bind.Function, out var keyControl)
                || _currentlyRebinding == null)
            {
                return;
            }

            if (removal && _currentlyRebinding.Function == bind.Function)
            {
                // Don't do update if the removal was from initiating a rebind.
                return;
            }

            UpdateBindingsData(bind.Function, keyControl);

            if (_currentlyRebinding.Function == keyControl.Function)
            {
                _currentlyRebinding = default;
            }
        }

        private void InputManagerOnFirstChanceOnKeyEvent(KeyEventArgs keyEvent, KeyEventType type)
        {
            DebugTools.Assert(IsInsideTree);

            if (_currentlyRebinding == default)
            {
                return;
            }

            keyEvent.Handle();

            if (type != KeyEventType.Up)
            {
                return;
            }

            var key = keyEvent.Key;

            // Figure out modifiers based on key event.
            // TODO: this won't allow for combinations with keys other than the standard modifier keys,
            // even though the input system totally supports it.
            var mods = new Keyboard.Key[3];
            var i = 0;
            if (keyEvent.Control && key != Keyboard.Key.Control)
            {
                mods[i] = Keyboard.Key.Control;
                i += 1;
            }

            if (keyEvent.Shift && key != Keyboard.Key.Shift)
            {
                mods[i] = Keyboard.Key.Shift;
                i += 1;
            }

            if (keyEvent.Alt && key != Keyboard.Key.Alt)
            {
                mods[i] = Keyboard.Key.Alt;
                i += 1;
            }

            // The input system can only handle 3 modifier keys so if you hold all 4 of the modifier keys
            // then system gets the shaft, I guess.
            if (keyEvent.System && i != 3 && key != Keyboard.Key.LSystem && key != Keyboard.Key.RSystem)
            {
                mods[i] = Keyboard.Key.LSystem;
            }

            var function = _currentlyRebinding.Function;
            var bindType = KeyBindingType.State;
            if (ToggleFunctions.Contains(function))
            {
                bindType = KeyBindingType.Toggle;
            }

            var bindingPriority = _currentlyRebinding.ExistingBinding?.Priority;
            if (bindingPriority is null)
            {
                if (_keyControls.TryGetValue(function, out var control) && control.Bind1 != null)
                {
                    bindingPriority = 1;
                }
            }

            var registration = new KeyBindingRegistration
            {
                Function = function,
                BaseKey = key,
                Mod1 = mods[0],
                Mod2 = mods[1],
                Mod3 = mods[2],
                Priority = bindingPriority ?? 0,
                Type = bindType,
                CanFocus = key is Keyboard.Key.MouseLeft
                    or Keyboard.Key.MouseRight
                    or Keyboard.Key.MouseMiddle,
                CanRepeat = false
            };

            if(_currentlyRebinding is CustomCommandBindArguments args)
            {
                registration.FunctionCommand = args.CommandText;
                registration.Type = KeyBindingType.Command;
            }

            _inputManager.RegisterBinding(registration);
            // OnKeyBindModified will cause _currentlyRebinding to be reset and the UI to update.
            _inputManager.SaveToUserData();
        }

        private void CustomCommandChanged(IKeyBinding keyBinding, string commandText)
        {
            _deferCommands.Add(() =>
            {
                _inputManager.RemoveBinding(keyBinding);

                var registration = new KeyBindingRegistration
                {
                    Function = keyBinding.Function,
                    BaseKey = keyBinding.BaseKey,
                    Mod1 = keyBinding.Mod1,
                    Mod2 = keyBinding.Mod2,
                    Mod3 = keyBinding.Mod3,
                    Priority = keyBinding.Priority,
                    Type = keyBinding.BindingType,
                    CanFocus = keyBinding.CanFocus,
                    CanRepeat = keyBinding.CanRepeat,
                    FunctionCommand = commandText,
                };

                _inputManager.RegisterBinding(registration);
                _inputManager.SaveToUserData();
            });
        }

        private void RebindButtonPressed(BindButton button, IKeyBindArguments args)
        {
            if (_currentlyRebinding != null)
                return;

            _currentlyRebinding = args;
            button.Text = Loc.GetString("ui-options-key-prompt");

            if (args.ExistingBinding != null)
            {
                _deferCommands.Add(() =>
                {
                    // Have to do defer this or else there will be an exception in InputManager.
                    // Because this IS fired from an input event.
                    _inputManager.RemoveBinding(args.ExistingBinding);
                });
            }
        }

        private void AddCustomBindingControl(BaseButton.ButtonEventArgs _)
        {
            foreach (var existingControls in CustomBindingsContainer.Children)
            {
                if (existingControls is not CustomCommandBindingControl customBinding)
                    continue;

                if (!customBinding.IsComplete)
                    return;
            }

            if (!_inputManager.TryGetUnusedCustomCommand(out var function))
            {
                AddCustomBindingButton.ToolTip = Loc.GetString("ui-options-add-custom-command-binding-disable-tooltip");
                AddCustomBindingButton.Disabled = true;
                return;
            }

            AddCustomBindingControl(function.Value);
        }

        private void AddCustomBindingControl(BoundKeyFunction function, IKeyBinding? keyBinding = null)
        {

            var customCommandBindingControl = new CustomCommandBindingControl
            {
                Function = function,
                Bind1 = keyBinding,
                OnBind = RebindButtonPressed,
                OnReset = () =>
                {
                    _deferCommands.Add(() =>
                    {
                        _inputManager.ResetBindingsFor(function);
                        _inputManager.SaveToUserData();
                    });
                    _keyControls.Remove(function);
                },
                ButtonOnKeyBindingDown = (args, binding) =>
                {
                    if (args.Function == EngineKeyFunctions.UIRightClick && binding != null)
                    {
                        _deferCommands.Add(() =>
                        {
                            _inputManager.RemoveBinding(binding);
                            _inputManager.SaveToUserData();
                        });

                        args.Handle();
                    }
                },
                OnDataChanged = CustomCommandChanged
            };

            CustomBindingsContainer.AddChild(customCommandBindingControl);

            _keyControls.Add(function, customCommandBindingControl);
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_deferCommands.Count == 0)
            {
                return;
            }

            foreach (var command in _deferCommands)
            {
                command();
            }

            _deferCommands.Clear();
        }

        private void UpdateKeyControlBindText()
        {
            foreach (var keyControl in _keyControls.Values)
            {
                keyControl.UpdateBindText();
            }
        }

        private void UpdateBindingsData(BoundKeyFunction function, IKeyBindingControl control)
        {
            var isModified = !_inputManager.IsKeyFunctionModified(function);
            var activeBinds = _inputManager.GetKeyBindings(function);
            control.UpdateData(activeBinds, isModified);
        }
    }
}
