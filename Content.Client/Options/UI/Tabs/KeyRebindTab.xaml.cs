using System.Linq;
using System.Numerics;
using Content.Client.Chat.Managers;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Chat.Widgets;
using Content.Shared.CCVar;
using Content.Shared.Chat;
using Content.Shared.Input;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;
using Robust.Shared.Input;
using Robust.Shared.Input.Binding;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Options.UI.Tabs
{
    [GenerateTypedNameReferences]
    public sealed partial class KeyRebindTab : Control
    {
        // List of key functions that must be registered as toggle instead.
        private static readonly HashSet<BoundKeyFunction> ToggleFunctions = new()
        {
            EngineKeyFunctions.ShowDebugMonitors,
            EngineKeyFunctions.HideUI,
        };

        [Dependency] private readonly IInputManager _inputManager = default!;
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IChatManager _chatManager = default!;

        private BindButton? _currentlyRebinding;

        private readonly Dictionary<BoundKeyFunction, KeyControl> _keyControls =
            new();

        private readonly Dictionary<BoundKeyFunction, Action> _customFunctionHandlers = new();
        private readonly HashSet<int> _usedCustomCommandSlots = new();

        private readonly List<Action> _deferCommands = new();

        private void HandleToggleUSQWERTYCheckbox(BaseButton.ButtonToggledEventArgs args)
        {
            _cfg.SetCVar(CVars.DisplayUSQWERTYHotkeys, args.Pressed);
            _cfg.SaveToFile();
        }

        private void InitToggleWalk()
        {
            if (_cfg.GetCVar(CCVars.ToggleWalk))
            {
                ToggleFunctions.Add(EngineKeyFunctions.Walk);
            }
            else
            {
                ToggleFunctions.Remove(EngineKeyFunctions.Walk);
            }
        }

        private void HandleToggleWalk(BaseButton.ButtonToggledEventArgs args)
        {
            _cfg.SetCVar(CCVars.ToggleWalk, args.Pressed);
            _cfg.SaveToFile();
            InitToggleWalk();

            if (!_keyControls.TryGetValue(EngineKeyFunctions.Walk, out var keyControl))
            {
                return;
            }

            var bindingType = args.Pressed ? KeyBindingType.Toggle : KeyBindingType.State;
            for (var i = 0; i <= 1; i++)
            {
                var binding = (i == 0 ? keyControl.BindButton1 : keyControl.BindButton2).Binding;
                if (binding == null)
                {
                    continue;
                }

                var registration = new KeyBindingRegistration
                {
                    Function = EngineKeyFunctions.Walk,
                    BaseKey = binding.BaseKey,
                    Mod1 = binding.Mod1,
                    Mod2 = binding.Mod2,
                    Mod3 = binding.Mod3,
                    Priority = binding.Priority,
                    Type = bindingType,
                    CanFocus = binding.CanFocus,
                    CanRepeat = binding.CanRepeat,
                };

                _deferCommands.Add(() =>
                {
                    _inputManager.RemoveBinding(binding);
                    _inputManager.RegisterBinding(registration);
                });
            }

            _deferCommands.Add(_inputManager.SaveToUserData);
        }

        private void HandleStaticStorageUI(BaseButton.ButtonToggledEventArgs args)
        {
            _cfg.SetCVar(CCVars.StaticStorageUI, args.Pressed);
            _cfg.SaveToFile();
        }

        public KeyRebindTab()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            AddCommandBindButton.OnPressed += _ => ToggleAddCommandDialog();

            ResetAllButton.OnPressed += _ =>
            {
                _deferCommands.Add(() =>
                {
                    // Reset all bindings in the input manager
                    _inputManager.ResetAllBindings();

                    // Clear all custom function handlers
                    _customFunctionHandlers.Clear();

                    // Clear all used custom command slots
                    _usedCustomCommandSlots.Clear();

                    // Save changes
                    _inputManager.SaveToUserData();
                });

                // Also update UI immediately: remove all key control UI rows from _newlyMadeBind container (if applicable)
                if (_newlyMadeBind != null)
                {
                    // Remove all children (all keybind rows)
                    for (int i = _newlyMadeBind.ChildCount - 1; i >= 0; i--)
                    {
                        _newlyMadeBind.RemoveChild(_newlyMadeBind.GetChild(i));
                    }
                }
            };

            var first = true;

            void AddHeader(string headerContents)
            {
                if (!first)
                {
                    KeybindsContainer.AddChild(new Control { MinSize = new Vector2(0, 8) });
                }

                first = false;
                KeybindsContainer.AddChild(new Label
                {
                    Text = Loc.GetString(headerContents),
                    FontColorOverride = StyleNano.NanoGold,
                    StyleClasses = { StyleNano.StyleClassLabelKeyText }
                });
            }

            void AddButton(BoundKeyFunction function)
            {
                var control = new KeyControl(this, function);
                KeybindsContainer.AddChild(control);
                _keyControls.Add(function, control);
            }

            void AddCheckBox(string checkBoxName, bool currentState, Action<BaseButton.ButtonToggledEventArgs>? callBackOnClick)
            {
                CheckBox newCheckBox = new CheckBox() { Text = Loc.GetString(checkBoxName) };
                newCheckBox.Pressed = currentState;
                newCheckBox.OnToggled += callBackOnClick;

                KeybindsContainer.AddChild(newCheckBox);
            }

            AddHeader("ui-options-header-general");
            AddCheckBox("ui-options-hotkey-keymap", _cfg.GetCVar(CVars.DisplayUSQWERTYHotkeys), HandleToggleUSQWERTYCheckbox);

            AddHeader("ui-options-header-movement");
            AddButton(EngineKeyFunctions.MoveUp);
            AddButton(EngineKeyFunctions.MoveLeft);
            AddButton(EngineKeyFunctions.MoveDown);
            AddButton(EngineKeyFunctions.MoveRight);
            AddButton(EngineKeyFunctions.Walk);
            AddCheckBox("ui-options-hotkey-toggle-walk", _cfg.GetCVar(CCVars.ToggleWalk), HandleToggleWalk);
            InitToggleWalk();
            AddButton(ContentKeyFunctions.ToggleKnockdown);

            AddHeader("ui-options-header-camera");
            AddButton(EngineKeyFunctions.CameraRotateLeft);
            AddButton(EngineKeyFunctions.CameraRotateRight);
            AddButton(EngineKeyFunctions.CameraReset);
            AddButton(ContentKeyFunctions.ZoomIn);
            AddButton(ContentKeyFunctions.ZoomOut);
            AddButton(ContentKeyFunctions.ResetZoom);

            AddHeader("ui-options-header-interaction-basic");
            AddButton(EngineKeyFunctions.Use);
            AddButton(EngineKeyFunctions.UseSecondary);
            AddButton(ContentKeyFunctions.UseItemInHand);
            AddButton(ContentKeyFunctions.AltUseItemInHand);
            AddButton(ContentKeyFunctions.ActivateItemInWorld);
            AddButton(ContentKeyFunctions.AltActivateItemInWorld);
            AddButton(ContentKeyFunctions.Drop);
            AddButton(ContentKeyFunctions.ExamineEntity);
            AddButton(ContentKeyFunctions.SwapHands);
            AddButton(ContentKeyFunctions.SwapHandsReverse);
            AddButton(ContentKeyFunctions.MoveStoredItem);
            AddButton(ContentKeyFunctions.RotateStoredItem);
            AddButton(ContentKeyFunctions.SaveItemLocation);

            AddHeader("ui-options-header-interaction-adv");
            AddButton(ContentKeyFunctions.SmartEquipBackpack);
            AddButton(ContentKeyFunctions.SmartEquipBelt);
            AddButton(ContentKeyFunctions.SmartEquipPocket1);
            AddButton(ContentKeyFunctions.SmartEquipPocket2);
            AddButton(ContentKeyFunctions.SmartEquipSuitStorage);
            AddButton(ContentKeyFunctions.OpenBackpack);
            AddButton(ContentKeyFunctions.OpenBelt);
            AddButton(ContentKeyFunctions.ThrowItemInHand);
            AddButton(ContentKeyFunctions.TryPullObject);
            AddButton(ContentKeyFunctions.MovePulledObject);
            AddButton(ContentKeyFunctions.ReleasePulledObject);
            AddButton(ContentKeyFunctions.Point);
            AddButton(ContentKeyFunctions.RotateObjectClockwise);
            AddButton(ContentKeyFunctions.RotateObjectCounterclockwise);
            AddButton(ContentKeyFunctions.FlipObject);

            AddHeader("ui-options-header-ui");
            AddButton(ContentKeyFunctions.FocusChat);
            AddButton(ContentKeyFunctions.FocusLocalChat);
            AddButton(ContentKeyFunctions.FocusEmote);
            AddButton(ContentKeyFunctions.FocusWhisperChat);
            AddButton(ContentKeyFunctions.FocusRadio);
            AddButton(ContentKeyFunctions.FocusLOOC);
            AddButton(ContentKeyFunctions.FocusOOC);
            AddButton(ContentKeyFunctions.FocusAdminChat);
            AddButton(ContentKeyFunctions.FocusDeadChat);
            AddButton(ContentKeyFunctions.FocusConsoleChat);
            AddButton(ContentKeyFunctions.CycleChatChannelForward);
            AddButton(ContentKeyFunctions.CycleChatChannelBackward);
            AddButton(ContentKeyFunctions.OpenCharacterMenu);
            AddButton(ContentKeyFunctions.OpenCraftingMenu);
            AddButton(ContentKeyFunctions.OpenGuidebook);
            AddButton(ContentKeyFunctions.OpenInventoryMenu);
            AddButton(ContentKeyFunctions.OpenAHelp);
            AddButton(ContentKeyFunctions.OpenActionsMenu);
            AddButton(ContentKeyFunctions.OpenEmotesMenu);
            AddButton(ContentKeyFunctions.ToggleRoundEndSummaryWindow);
            AddButton(ContentKeyFunctions.OpenEntitySpawnWindow);
            AddButton(ContentKeyFunctions.OpenSandboxWindow);
            AddButton(ContentKeyFunctions.OpenTileSpawnWindow);
            AddButton(ContentKeyFunctions.OpenDecalSpawnWindow);
            AddButton(ContentKeyFunctions.OpenAdminMenu);
            AddButton(EngineKeyFunctions.WindowCloseAll);
            AddButton(EngineKeyFunctions.WindowCloseRecent);
            AddButton(EngineKeyFunctions.EscapeMenu);
            AddButton(ContentKeyFunctions.EscapeContext);

            AddHeader("ui-options-header-misc");
            AddButton(ContentKeyFunctions.TakeScreenshot);
            AddButton(ContentKeyFunctions.TakeScreenshotNoUI);
            AddButton(ContentKeyFunctions.ToggleFullscreen);

            AddHeader("ui-options-header-hotbar");
            foreach (var boundKey in ContentKeyFunctions.GetHotbarBoundKeys())
            {
                AddButton(boundKey);
            }

            AddHeader("ui-options-header-shuttle");
            AddButton(ContentKeyFunctions.ShuttleStrafeUp);
            AddButton(ContentKeyFunctions.ShuttleStrafeRight);
            AddButton(ContentKeyFunctions.ShuttleStrafeLeft);
            AddButton(ContentKeyFunctions.ShuttleStrafeDown);
            AddButton(ContentKeyFunctions.ShuttleRotateLeft);
            AddButton(ContentKeyFunctions.ShuttleRotateRight);
            AddButton(ContentKeyFunctions.ShuttleBrake);

            AddHeader("ui-options-header-map-editor");
            AddButton(EngineKeyFunctions.EditorPlaceObject);
            AddButton(EngineKeyFunctions.EditorCancelPlace);
            AddButton(EngineKeyFunctions.EditorGridPlace);
            AddButton(EngineKeyFunctions.EditorLinePlace);
            AddButton(EngineKeyFunctions.EditorRotateObject);
            AddButton(ContentKeyFunctions.EditorFlipObject);
            AddButton(ContentKeyFunctions.EditorCopyObject);

            AddHeader("ui-options-header-dev");
            AddButton(EngineKeyFunctions.ShowDebugConsole);
            AddButton(EngineKeyFunctions.ShowDebugMonitors);
            AddButton(EngineKeyFunctions.HideUI);
            AddButton(ContentKeyFunctions.InspectEntity);

            AddHeader("ui-options-header-text-cursor");
            AddButton(EngineKeyFunctions.TextCursorLeft);
            AddButton(EngineKeyFunctions.TextCursorRight);
            AddButton(EngineKeyFunctions.TextCursorUp);
            AddButton(EngineKeyFunctions.TextCursorDown);
            AddButton(EngineKeyFunctions.TextCursorWordLeft);
            AddButton(EngineKeyFunctions.TextCursorWordRight);
            AddButton(EngineKeyFunctions.TextCursorBegin);
            AddButton(EngineKeyFunctions.TextCursorEnd);

            AddHeader("ui-options-header-text-cursor-select");
            AddButton(EngineKeyFunctions.TextCursorSelect);
            AddButton(EngineKeyFunctions.TextCursorSelectLeft);
            AddButton(EngineKeyFunctions.TextCursorSelectRight);
            AddButton(EngineKeyFunctions.TextCursorSelectUp);
            AddButton(EngineKeyFunctions.TextCursorSelectDown);
            AddButton(EngineKeyFunctions.TextCursorSelectWordLeft);
            AddButton(EngineKeyFunctions.TextCursorSelectWordRight);
            AddButton(EngineKeyFunctions.TextCursorSelectBegin);
            AddButton(EngineKeyFunctions.TextCursorSelectEnd);

            AddHeader("ui-options-header-text-edit");
            AddButton(EngineKeyFunctions.TextBackspace);
            AddButton(EngineKeyFunctions.TextDelete);
            AddButton(EngineKeyFunctions.TextWordBackspace);
            AddButton(EngineKeyFunctions.TextWordDelete);
            AddButton(EngineKeyFunctions.TextNewline);
            AddButton(EngineKeyFunctions.TextSubmit);
            AddButton(EngineKeyFunctions.MultilineTextSubmit);
            AddButton(EngineKeyFunctions.TextSelectAll);
            AddButton(EngineKeyFunctions.TextCopy);
            AddButton(EngineKeyFunctions.TextCut);
            AddButton(EngineKeyFunctions.TextPaste);

            AddHeader("ui-options-header-text-chat");
            AddButton(EngineKeyFunctions.TextHistoryPrev);
            AddButton(EngineKeyFunctions.TextHistoryNext);
            AddButton(EngineKeyFunctions.TextReleaseFocus);
            AddButton(EngineKeyFunctions.TextScrollToBottom);

            AddHeader("ui-options-header-text-other");
            AddButton(EngineKeyFunctions.TextTabComplete);
            AddButton(EngineKeyFunctions.TextCompleteNext);
            AddButton(EngineKeyFunctions.TextCompletePrev);

            foreach (var control in _keyControls.Values)
            {
                UpdateKeyControl(control);
            }
        }
        private BoxContainer? _addCommandDialog;
        private BoxContainer? _addCustomBindDialog;
        private BoxContainer? _newlyMadeBind;
        private Keyboard.Key? _lastPressedKey = null;
        private bool _waitingForKeyPress = false;
        private Button? _bindKeyButton;
        private LineEdit? _textEntry;
        private string _actionPrefix = "";

        // Main Custom command UI dialog
        private void CreateAddCommandDialog()
        {
            var closeButton = new Button
            {
                Text = "Close",
                HorizontalAlignment = HAlignment.Left
            };
            closeButton.OnPressed += _ =>
            {
                if (_addCommandDialog != null)
                    _addCommandDialog.Visible = false;
            };

            var newBindButton = new Button
            {
                Text = "New Keybind",
                HorizontalAlignment = HAlignment.Right
            };
            newBindButton.OnPressed += _ => ToggleCustomBindDialog();

            var closeNewRow = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                SeparationOverride = 8,
                HorizontalExpand = true,
                Children = { closeButton,
                    new Control { HorizontalExpand = true, MouseFilter = MouseFilterMode.Stop }, newBindButton }
            };

            _newlyMadeBind = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                SeparationOverride = 4
            };

            var contentBox = new BoxContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                Orientation = LayoutOrientation.Vertical,
                Margin = new Thickness(8),
                Children =
                {
                    new Label { Text = "Add Command Bind Dialog", HorizontalAlignment = HAlignment.Center },
                    _newlyMadeBind,
                    new Control { MinSize = new Vector2(0, 10) },
                    closeNewRow
                }
            };

            var backgroundPanel = new PanelContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                StyleClasses = { StyleNano.StyleClassBorderedWindowPanel },
                MinSize = new Vector2(700, 350),
                Children = { contentBox }
            };

            _addCommandDialog = new BoxContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                Orientation = LayoutOrientation.Vertical,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                Children = { backgroundPanel },
                Visible = true
            };

            AddChild(_addCommandDialog);
        }

        //Dialog for the addition of a new custom keybind
        private void CreateNewBindDialog()
        {
            var dropdownExpanded = false;

            var dropdownOptionsContainer = new BoxContainer
            {
                Visible = false,
                SeparationOverride = 6
            };

            var options = new[] { "Say: ", "Emote: ", "Run Command: " };
            var dropdownButton = new Button
            {
                Text = "Action: ",
                HorizontalAlignment = HAlignment.Left
            };

            foreach (var option in options)
            {
                var optionButton = new Button
                {
                    Text = option,
                    HorizontalAlignment = HAlignment.Left
                };
                optionButton.OnPressed += _ =>
                {
                    dropdownButton.Text = option;
                    _actionPrefix = option;
                    dropdownOptionsContainer.Visible = false;
                    dropdownExpanded = false;
                };
                dropdownOptionsContainer.AddChild(optionButton);
            }

            dropdownButton.OnPressed += _ =>
            {
                dropdownExpanded = !dropdownExpanded;
                dropdownOptionsContainer.Visible = dropdownExpanded;
            };

            _textEntry = new LineEdit
            {
                MinSize = new Vector2(400, 10),
                Text = "Enter your custom command...",
                HorizontalExpand = true,
                StyleClasses = { "chatLineEdit" }
            };

            _bindKeyButton = new Button
            {
                Text = "Press Key",
                HorizontalAlignment = HAlignment.Right
            };

            _bindKeyButton.OnPressed += _ =>
            {
                if (_waitingForKeyPress)
                    return;

                if (dropdownButton.Text == "Action: " || string.IsNullOrWhiteSpace(_textEntry.Text))
                    return;

                _waitingForKeyPress = true;
                _bindKeyButton.Text = "Press a key...";
                _inputManager.FirstChanceOnKeyEvent += OnKeyPressed;
            };

            var closeButton = new Button
            {
                Text = "Close",
                HorizontalAlignment = HAlignment.Left
            };

            closeButton.OnPressed += _ =>
            {
                if (_addCustomBindDialog != null)
                    _addCustomBindDialog.Visible = false;
            };

            var bindRow = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                SeparationOverride = 8,
                HorizontalExpand = true,
                Children = { dropdownButton, _textEntry,
                    new Control { HorizontalExpand = true, MouseFilter = MouseFilterMode.Stop }, _bindKeyButton }
            };

            var container = new BoxContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                Orientation = LayoutOrientation.Vertical,
                Margin = new Thickness(8),
                Children =
                {
                    new Label { Text = "Create New Bind", HorizontalAlignment = HAlignment.Center },
                    new Control { MinSize = new Vector2(450, 10) },
                    bindRow,
                    dropdownOptionsContainer,
                    new Control { MinSize = new Vector2(0, 10) },
                    closeButton
                }
            };

            var backgroundPanel = new PanelContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                StyleClasses = { StyleNano.StyleClassBorderedWindowPanel },
                MinSize = new Vector2(600, 100),
                Children = { container }
            };

            _addCustomBindDialog = new BoxContainer
            {
                MouseFilter = MouseFilterMode.Stop,
                Orientation = LayoutOrientation.Vertical,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                Children = { backgroundPanel },
                Visible = true
            };

            AddChild(_addCustomBindDialog);
        }

        //Turn visible the custom keybinds window
        private void ToggleAddCommandDialog()
        {
            if (_addCommandDialog == null)
                CreateAddCommandDialog();
            else
                _addCommandDialog.Visible = !_addCommandDialog.Visible;
        }

        //Turn visible the window to add a new custom keybinds
        private void ToggleCustomBindDialog()
        {
            if (_addCustomBindDialog == null)
                CreateNewBindDialog();
            else
                _addCustomBindDialog.Visible = !_addCustomBindDialog.Visible;
        }

        private void OnKeyPressed(KeyEventArgs args, KeyEventType type)
        {
            if (!_waitingForKeyPress || type != KeyEventType.Down)
                return;

            _inputManager.FirstChanceOnKeyEvent -= OnKeyPressed;
            _waitingForKeyPress = false;

            _lastPressedKey = args.Key;

            if (_bindKeyButton != null)
                _bindKeyButton.Text = "Press Key"; // Reset to original state

            if (_lastPressedKey.HasValue && _textEntry != null && !string.IsNullOrWhiteSpace(_textEntry.Text))
            {
                var labelBind = new Label
                {
                    Text = _actionPrefix + _textEntry.Text,
                    HorizontalAlignment = HAlignment.Left
                };

                var boundFunction = CreateBoundFunction(_actionPrefix, _textEntry.Text);

                var bindButton = new Button
                {
                    Text = _lastPressedKey.ToString(),
                    HorizontalAlignment = HAlignment.Right
                };

                var clonedTextEntry = new LineEdit
                {
                    Text = _textEntry.Text,
                    HorizontalExpand = true,
                    StyleClasses = { "chatLineEdit" }
                };

                BoxContainer? newBindRow = null;
                var removeButton = new Button
                {
                    Text = "Remove",
                    StyleClasses = { StyleBase.ButtonCaution },
                    HorizontalAlignment = HAlignment.Right
                };
                removeButton.OnPressed += _ =>
                {
                    if (_newlyMadeBind != null && newBindRow != null)
                    {
                        _newlyMadeBind.RemoveChild(newBindRow);
                    }

                    _deferCommands.Add(() =>
                    {
                        if (_customFunctionHandlers.ContainsKey(boundFunction))
                        {
                            _customFunctionHandlers.Remove(boundFunction);
                        }

                        var binding = _inputManager.GetKeyBinding(boundFunction);
                        if (binding != null)
                        {
                            _inputManager.RemoveBinding(binding);
                            _inputManager.SaveToUserData();
                        }

                        var customKeys = ContentKeyFunctions.GetCustomCommandKeys();
                        var index = Array.IndexOf(customKeys, boundFunction);
                        if (index >= 0)
                        {
                            _usedCustomCommandSlots.Remove(index);
                        }
                    });
                };



                newBindRow = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    SeparationOverride = 8,
                    HorizontalExpand = true,
                    Children = { labelBind, clonedTextEntry, new Control { HorizontalExpand = true }, bindButton, removeButton }
                };

                _newlyMadeBind?.AddChild(newBindRow);
                _addCustomBindDialog!.Visible = false;

                var keyParts = new List<string>();
                if (args.Control) keyParts.Add("Ctrl");
                if (args.Shift) keyParts.Add("Shift");
                if (args.Alt) keyParts.Add("Alt");

                keyParts.Add(args.Key.ToString());

                var keyString = string.Join('+', keyParts);
                AddCustomBinding(boundFunction, keyString);
            }
        }

        private void AddCustomBinding(BoundKeyFunction function, string keyString)
        {
            if (string.IsNullOrWhiteSpace(keyString))
            {
                Logger.Warning("Key string is empty or null.");
                return;
            }

            var parts = keyString.Split('+', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            Keyboard.Key baseKey = Keyboard.Key.Unknown;
            var mods = new List<Keyboard.Key>();

            foreach (var part in parts)
            {
                var lower = part.ToLowerInvariant();
                if (lower == "ctrl" || lower == "control") mods.Add(Keyboard.Key.Control);
                else if (lower == "shift") mods.Add(Keyboard.Key.Shift);
                else if (lower == "alt") mods.Add(Keyboard.Key.Alt);
                else if (lower == "win" || lower == "system") mods.Add(Keyboard.Key.LSystem);
                else if (!Keyboard.Key.TryParse(part, out baseKey))
                {
                    Logger.Warning($"Invalid key or modifier in key string: {keyString}");
                    return;
                }
            }

            if (baseKey == Keyboard.Key.Unknown)
            {
                Logger.Warning($"No base key found in key string: {keyString}");
                return;
            }

            var registration = new KeyBindingRegistration
            {
                Function = function,
                BaseKey = baseKey,
                Mod1 = mods.ElementAtOrDefault(0),
                Mod2 = mods.ElementAtOrDefault(1),
                Mod3 = mods.ElementAtOrDefault(2),
                Type = KeyBindingType.State,
                Priority = 0,
                CanFocus = false,
                CanRepeat = false
            };

            _inputManager.RegisterBinding(registration);
            _inputManager.SaveToUserData();
        }

        private BoundKeyFunction CreateBoundFunction(string action, string command)
        {
            Logger.Info($"Creating function for action '{action}' and command '{command}'");

            const string prefixSay = "Say: ";
            const string prefixEmote = "Emote: ";
            const string prefixRun = "Run Command: ";

            ChatSelectChannel channel;

            if (action.StartsWith(prefixSay, StringComparison.OrdinalIgnoreCase))
            {
                channel = ChatSelectChannel.Local;
            }
            else if (action.StartsWith(prefixEmote, StringComparison.OrdinalIgnoreCase))
            {
                channel = ChatSelectChannel.Emotes;
            }
            else if (action.StartsWith(prefixRun, StringComparison.OrdinalIgnoreCase))
            {
                channel = ChatSelectChannel.Console;
            }
            else
            {
                Logger.Warning($"Unknown action type: {action}");
                return null!;
            }

            for (int i = 0; i <= 9; i++)
            {
                if (_usedCustomCommandSlots.Contains(i))
                    continue;

                // Mark the slot as used
                _usedCustomCommandSlots.Add(i);

                var function = ContentKeyFunctions.GetCustomCommandKeys()[i];
                Logger.Info($"Binding to CustomCommand{i}");

                // Store the handler
                _customFunctionHandlers[function] = () =>
                {
                    var chatManager = IoCManager.Resolve<IChatManager>();
                    chatManager.SendMessage(command, channel);
                };

                _inputManager.SetInputCommand(
                    function,
                    InputCmdHandler.FromDelegate(_ => _customFunctionHandlers[function]?.Invoke())
                );

                return function;
            }

            Logger.Error("No available custom command slots (0–9)");
            return null!;
        }

        private void UpdateKeyControl(KeyControl control)
        {
            var activeBinds = _inputManager.GetKeyBindings(control.Function);

            IKeyBinding? bind1 = null;
            IKeyBinding? bind2 = null;

            if (activeBinds.Count > 0)
            {
                bind1 = activeBinds[0];

                if (activeBinds.Count > 1)
                {
                    bind2 = activeBinds[1];
                }
            }

            control.BindButton1.Binding = bind1;
            control.BindButton1.UpdateText();

            control.BindButton2.Binding = bind2;
            control.BindButton2.UpdateText();

            control.BindButton2.Button.Disabled = activeBinds.Count == 0;
            control.ResetButton.Disabled = !_inputManager.IsKeyFunctionModified(control.Function);
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();

            _inputManager.FirstChanceOnKeyEvent += InputManagerOnFirstChanceOnKeyEvent;
            _inputManager.OnKeyBindingAdded += OnKeyBindAdded;
            _inputManager.OnKeyBindingRemoved += OnKeyBindRemoved;
        }

        protected override void ExitedTree()
        {
            base.ExitedTree();

            _inputManager.FirstChanceOnKeyEvent -= InputManagerOnFirstChanceOnKeyEvent;
            _inputManager.OnKeyBindingAdded -= OnKeyBindAdded;
            _inputManager.OnKeyBindingRemoved -= OnKeyBindRemoved;
        }

        private void OnKeyBindRemoved(IKeyBinding obj)
        {
            OnKeyBindModified(obj, true);
        }

        private void OnKeyBindAdded(IKeyBinding obj)
        {
            OnKeyBindModified(obj, false);
        }

        private void OnKeyBindModified(IKeyBinding bind, bool removal)
        {
            if (!_keyControls.TryGetValue(bind.Function, out var keyControl))
            {
                return;
            }

            if (removal && _currentlyRebinding?.KeyControl == keyControl)
            {
                // Don't do update if the removal was from initiating a rebind.
                return;
            }

            UpdateKeyControl(keyControl);

            if (_currentlyRebinding == keyControl.BindButton1 || _currentlyRebinding == keyControl.BindButton2)
            {
                _currentlyRebinding = null;
            }
        }

        private void InputManagerOnFirstChanceOnKeyEvent(KeyEventArgs keyEvent, KeyEventType type)
        {
            DebugTools.Assert(IsInsideTree);

            if (_currentlyRebinding == null)
            {
                return;
            }

            keyEvent.Handle();

            if (type != KeyEventType.Up)
            {
                return;
            }

            var key = keyEvent.Key;

            // Figure out modifiers based on key event.
            // TODO: this won't allow for combinations with keys other than the standard modifier keys,
            // even though the input system totally supports it.
            var mods = new Keyboard.Key[3];
            var i = 0;
            if (keyEvent.Control && key != Keyboard.Key.Control)
            {
                mods[i] = Keyboard.Key.Control;
                i += 1;
            }

            if (keyEvent.Shift && key != Keyboard.Key.Shift)
            {
                mods[i] = Keyboard.Key.Shift;
                i += 1;
            }

            if (keyEvent.Alt && key != Keyboard.Key.Alt)
            {
                mods[i] = Keyboard.Key.Alt;
                i += 1;
            }

            // The input system can only handle 3 modifier keys so if you hold all 4 of the modifier keys
            // then system gets the shaft, I guess.
            if (keyEvent.System && i != 3 && key != Keyboard.Key.LSystem && key != Keyboard.Key.RSystem)
            {
                mods[i] = Keyboard.Key.LSystem;
            }

            var function = _currentlyRebinding.KeyControl.Function;
            var bindType = KeyBindingType.State;
            if (ToggleFunctions.Contains(function))
            {
                bindType = KeyBindingType.Toggle;
            }

            var registration = new KeyBindingRegistration
            {
                Function = function,
                BaseKey = key,
                Mod1 = mods[0],
                Mod2 = mods[1],
                Mod3 = mods[2],
                Priority = _currentlyRebinding.Binding?.Priority ?? 0,
                Type = bindType,
                CanFocus = key == Keyboard.Key.MouseLeft
                           || key == Keyboard.Key.MouseRight
                           || key == Keyboard.Key.MouseMiddle,
                CanRepeat = false
            };

            _inputManager.RegisterBinding(registration);
            // OnKeyBindModified will cause _currentlyRebinding to be reset and the UI to update.
            _inputManager.SaveToUserData();
        }

        private void RebindButtonPressed(BindButton button)
        {
            if (_currentlyRebinding != null)
            {
                return;
            }

            _currentlyRebinding = button;
            _currentlyRebinding.Button.Text = Loc.GetString("ui-options-key-prompt");

            if (button.Binding != null)
            {
                _deferCommands.Add(() =>
                {
                    // Have to do defer this or else there will be an exception in InputManager.
                    // Because this IS fired from an input event.
                    _inputManager.RemoveBinding(button.Binding);
                });
            }
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_deferCommands.Count == 0)
            {
                return;
            }

            foreach (var command in _deferCommands)
            {
                command();
            }

            _deferCommands.Clear();
        }

        private sealed class KeyControl : Control
        {
            public readonly BoundKeyFunction Function;
            public readonly BindButton BindButton1;
            public readonly BindButton BindButton2;
            public readonly Button ResetButton;

            public KeyControl(KeyRebindTab parent, BoundKeyFunction function)
            {
                Function = function;
                var name = new Label
                {
                    Text = Loc.GetString(
                        $"ui-options-function-{CaseConversion.PascalToKebab(function.FunctionName)}"),
                    HorizontalExpand = true,
                    HorizontalAlignment = HAlignment.Left
                };

                BindButton1 = new BindButton(parent, this, StyleBase.ButtonOpenRight);
                BindButton2 = new BindButton(parent, this, StyleBase.ButtonOpenLeft);
                ResetButton = new Button { Text = Loc.GetString("ui-options-bind-reset"), StyleClasses = { StyleBase.ButtonCaution } };

                var hBox = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children =
                    {
                        new Control {MinSize = new Vector2(5, 0)},
                        name,
                        BindButton1,
                        BindButton2,
                        new Control {MinSize = new Vector2(10, 0)},
                        ResetButton
                    }
                };

                ResetButton.OnPressed += args =>
                {
                    parent._deferCommands.Add(() =>
                    {
                        parent._inputManager.ResetBindingsFor(function);
                        parent._inputManager.SaveToUserData();
                    });
                };

                AddChild(hBox);
            }
        }

        private sealed class BindButton : Control
        {
            private readonly KeyRebindTab _tab;
            public readonly KeyControl KeyControl;
            public readonly Button Button;
            public IKeyBinding? Binding;

            public BindButton(KeyRebindTab tab, KeyControl keyControl, string styleClass)
            {
                _tab = tab;
                KeyControl = keyControl;
                Button = new Button { StyleClasses = { styleClass } };
                UpdateText();
                AddChild(Button);

                Button.OnPressed += args =>
                {
                    tab.RebindButtonPressed(this);
                };

                Button.OnKeyBindDown += ButtonOnOnKeyBindDown;

                MinSize = new Vector2(200, 0);
            }

            protected override void EnteredTree()
            {
                base.EnteredTree();
                _tab._inputManager.OnInputModeChanged += UpdateText;
            }

            protected override void ExitedTree()
            {
                base.ExitedTree();
                _tab._inputManager.OnInputModeChanged -= UpdateText;
            }

            private void ButtonOnOnKeyBindDown(GUIBoundKeyEventArgs args)
            {
                if (args.Function == EngineKeyFunctions.UIRightClick)
                {
                    if (Binding != null)
                    {
                        _tab._deferCommands.Add(() =>
                        {
                            _tab._inputManager.RemoveBinding(Binding);
                            _tab._inputManager.SaveToUserData();
                        });
                    }

                    args.Handle();
                }
            }

            public void UpdateText()
            {
                Button.Text = Binding?.GetKeyString() ?? Loc.GetString("ui-options-unbound");
            }
        }
    }
}
