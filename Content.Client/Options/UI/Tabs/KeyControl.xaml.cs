using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Utility;

namespace Content.Client.Options.UI.Tabs;

/// <summary>
/// Control for keybinding of certain bindable function.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class KeyControl : Control, IKeyBindingControl
{
    private readonly BoundKeyFunction _function;

    public IKeyBinding? Bind1 { get; set; }
    public IKeyBinding? Bind2 { get; set; }

    /// <inheritdoc />
    public KeyControl()
    {
        RobustXamlLoader.Load(this);
    }

    /// <summary> Function that should be bound. </summary>
    public required BoundKeyFunction Function
    {
        get => _function;
        init
        {
            _function = value;
            NameLabel.Text = Loc.GetString(
                $"ui-options-function-{CaseConversion.PascalToKebab(value.FunctionName)}"
            );
        }
    }

    /// <summary> Action to invoke on Reset button click. </summary>
    public required Action OnReset
    {
        init => ResetButton.OnPressed += _ => value();
    }

    /// <summary> Action to invoke on key binding click. Attaches for both 'option1' and 'option2'. </summary>
    public required Action<GUIBoundKeyEventArgs, IKeyBinding?> ButtonOnKeyBindingDown
    {
        init
        {
            BindButton1.ButtonOnKeyBindingDown = value;
            BindButton2.ButtonOnKeyBindingDown = value;
        }
    }

    /// <summary>
    /// Action to invoke on BindButton click.
    /// </summary>
    public required Action<BindButton, IKeyBindArguments> OnBind
    {
        init
        {
            BindButton1.OnPressed += _ => value(BindButton1, new SimpleKeyBindArguments(_function, Bind1));
            BindButton2.OnPressed += _ => value(BindButton2, new SimpleKeyBindArguments(_function, Bind2));
        }
    }

    /// <summary>
    /// Update binding data. Should be invoked to keep bind buttons info up to date
    /// after input manager key bindings were updated.
    /// </summary>
    public void UpdateData(IReadOnlyList<IKeyBinding> bindings, bool isModified)
    {
        Bind1 = null;
        Bind2 = null;
        if (bindings.Count > 0)
        {
            Bind1 = bindings[0];

            if (bindings.Count > 1)
            {
                Bind2 = bindings[1];
            }
        }

        BindButton1.Binding = Bind1;
        BindButton2.Binding = Bind2;
        BindButton2.Disabled = BindButton1.Binding == null;

        ResetButton.Disabled = isModified;
    }

    public void UpdateBindText()
    {
        BindButton1.UpdateText();
        BindButton2.UpdateText();
    }
}
