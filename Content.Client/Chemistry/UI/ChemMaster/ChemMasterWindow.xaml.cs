using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry.Components;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Chemistry.UI.ChemMaster
{
    /// <summary>
    /// Client-side UI used to control a <see cref="ChemMasterComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class ChemMasterWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private readonly SpriteSystem _sprite;

        public event Action<(ReagentId Id, FixedPoint2 Amount, bool IsBuffer)>? OnReagentButton;
        public event Action<string>? OnEjectButton;
        public event Action<ChemMasterMode>? OnModeButton;
        public event Action? OnSortButton;
        public event Action<uint>? OnPillButton;
        public event Action<(FixedPoint2 Dosage, uint Count, string Label)>? OnCreatePill;
        public event Action<(FixedPoint2 Dosage, string Label)>? OnCreateBottle;

        private const string PillsRsiPath = "/Textures/Objects/Specific/Chemistry/pills.rsi";
        private readonly Button[] _pillTypeButtons;

        private readonly string _noContainerText = Loc.GetString("chem-master-window-no-container-loaded-text");

        private readonly ReagentList _bufferReagentList;
        private readonly ReagentList _inputReagentList;
        private readonly ReagentList _outputReagentList;

        /// <summary>
        /// Create and initialize the chem master UI client-side. Creates the basic layout,
        /// actual data isn't filled in until the server sends data about the chem master.
        /// </summary>
        public ChemMasterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _sprite = _entityManager.System<SpriteSystem>();

            // Pill type selection buttons, in total there are 20 pills.
            // Pill rsi file should have states named as pill1, pill2, and so on.
            var resourcePath = new ResPath(PillsRsiPath);
            var pillTypeGroup = new ButtonGroup();
            _pillTypeButtons = new Button[ChemMasterComponent.PillTypes];
            for (uint i = 0; i < _pillTypeButtons.Length; i++)
            {
                // For every button decide which stylebase to have
                // Every row has 10 buttons
                String styleBase = StyleBase.ButtonOpenBoth;
                uint modulo = i % 10;
                if (i > 0 && modulo == 0)
                    styleBase = StyleBase.ButtonOpenRight;
                else if (i > 0 && modulo == 9)
                    styleBase = StyleBase.ButtonOpenLeft;
                else if (i == 0)
                    styleBase = StyleBase.ButtonOpenRight;

                // Generate buttons
                var button = new Button
                {
                    Access = AccessLevel.Public,
                    StyleClasses = { styleBase },
                    MaxSize = new Vector2(42, 28),
                    Group = pillTypeGroup
                };

                // Generate buttons textures
                var specifier = new SpriteSpecifier.Rsi(resourcePath, "pill" + (i + 1));
                TextureRect pillTypeTexture = new TextureRect
                {
                    Texture = _sprite.Frame0(specifier),
                    TextureScale = new Vector2(1.75f, 1.75f),
                    Stretch = TextureRect.StretchMode.KeepCentered,
                };
                button.AddChild(pillTypeTexture);

                // Avoid silly variable capture
                var index = i;
                button.OnPressed += _ => OnPillButton?.Invoke(index);

                _pillTypeButtons[index] = button;
                Grid.AddChild(button);
            }

            PillDosage.InitDefaultButtons();
            PillNumber.InitDefaultButtons();
            BottleDosage.InitDefaultButtons();

            // Ensure label length is within the character limit.
            LabelLineEdit.IsValid = s => s.Length <= ChemMasterComponent.LabelMaxLength;

            Tabs.SetTabTitle(0, Loc.GetString("chem-master-window-input-tab"));
            Tabs.SetTabTitle(1, Loc.GetString("chem-master-window-output-tab"));

            // Initial reagent list setup
            _bufferReagentList = new ReagentList(Loc.GetString("chem-master-window-buffer-label") + " ",
                ChemMasterComponent.ChemMasterAmountOptions,
                Loc.GetString("chem-master-window-buffer-empty-text"));

            _inputReagentList = new ReagentList(_noContainerText, ChemMasterComponent.ChemMasterAmountOptions);

            _outputReagentList = new ReagentList(_noContainerText, []);

            BufferInfo.AddChild(_bufferReagentList);
            InputContainerInfo.AddChild(_inputReagentList);
            OutputContainerInfo.AddChild(_outputReagentList);

            // Register events
            _bufferReagentList.OnRowAmountPressed +=
                (id, quantity) => OnReagentButton?.Invoke((id, quantity, true));
            _inputReagentList.OnRowAmountPressed +=
                (id, quantity) => OnReagentButton?.Invoke((id, quantity, false));

            InputEjectButton.OnPressed += _ => OnEjectButton?.Invoke(ChemMasterComponent.InputSlotName);
            OutputEjectButton.OnPressed += _ => OnEjectButton?.Invoke(ChemMasterComponent.OutputSlotName);

            BufferTransferButton.OnPressed += _ => OnModeButton?.Invoke(ChemMasterMode.Transfer);
            BufferDiscardButton.OnPressed += _ => OnModeButton?.Invoke(ChemMasterMode.Discard);

            BufferSortButton.OnPressed += _ => OnSortButton?.Invoke();

            // Note that PillNumber has an IsValid that enforces it being positive.
            CreatePillButton.OnPressed += _ =>
                OnCreatePill?.Invoke((PillDosage.Value, (uint)PillNumber.Value, LabelLineEdit.Text));
            CreateBottleButton.OnPressed += _ => OnCreateBottle?.Invoke((BottleDosage.Value, LabelLineEdit.Text));
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (ChemMasterBoundUserInterfaceState)state;

            if (castState.UpdateLabel)
                LabelLineEdit.Text = GenerateLabel(castState);

            // Ensure the Panel Info is updated, including UI elements for Buffer Volume, Output Container and so on
            UpdatePanelInfo(castState);

            BufferCurrentVolume.Text = " " + ReagentQuantity.LocalizedQuantity(castState.BufferCurrentVolume);

            InputEjectButton.Disabled = castState.InputContainerInfo is null;
            OutputEjectButton.Disabled = castState.OutputContainerInfo is null;
            CreateBottleButton.Disabled = castState.OutputContainerInfo?.Reagents == null;
            CreatePillButton.Disabled = castState.OutputContainerInfo?.Entities == null;

            UpdateDosageFields(castState);
        }

        //assign default values for pill and bottle fields.
        private void UpdateDosageFields(ChemMasterBoundUserInterfaceState castState)
        {
            var output = castState.OutputContainerInfo;
            var remainingCapacity = output is null ? 0 : (output.MaxVolume - output.CurrentVolume).Int();
            var holdsReagents = output?.Reagents != null;
            var pillNumberMax = holdsReagents ? 0 : remainingCapacity;
            var bottleAmountMax = holdsReagents ? remainingCapacity : 0;
            var bufferVolume = castState.BufferCurrentVolume ?? 0;

            var maxDosage = FixedPoint2.Min(bufferVolume, castState.PillDosageLimit);
            PillDosage.Value = maxDosage.Int();

            _pillTypeButtons[castState.SelectedPillType].Pressed = true;

            PillNumber.IsValid = x => x >= 0 && x <= pillNumberMax;
            PillDosage.IsValid = x => x > 0 && x <= castState.PillDosageLimit;
            BottleDosage.IsValid = x => x >= 0 && x <= bottleAmountMax;

            if (PillNumber.Value > pillNumberMax)
                PillNumber.Value = pillNumberMax;
            if (BottleDosage.Value > bottleAmountMax)
                BottleDosage.Value = bottleAmountMax;

            // Avoid division by zero
            if (maxDosage > 0)
            {
                PillNumber.Value = FixedPoint2.Min(bufferVolume / maxDosage, pillNumberMax).Int();
            }
            else
            {
                PillNumber.Value = 0;
            }

            BottleDosage.Value = FixedPoint2.Min(bottleAmountMax, bufferVolume).Int();
        }
        /// <summary>
        /// Generate a product label based on reagents in the buffer.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        private string GenerateLabel(ChemMasterBoundUserInterfaceState state)
        {
            if (state.BufferCurrentVolume == 0)
                return "";

            var reagent = state.BufferReagents.OrderBy(r => r.Quantity).First().Reagent;
            _prototypeManager.TryIndex(reagent.Prototype, out ReagentPrototype? proto);
            return proto?.LocalizedName ?? "";
        }

        /// <summary>
        /// Update the container, buffer, and packaging panels.
        /// </summary>
        /// <param name="state">State data for the dispenser.</param>
        private void UpdatePanelInfo(ChemMasterBoundUserInterfaceState state)
        {
            BufferTransferButton.Pressed = state.Mode == ChemMasterMode.Transfer;
            BufferDiscardButton.Pressed = state.Mode == ChemMasterMode.Discard;

            UpdateContainerInfo(_inputReagentList, state.InputContainerInfo);
            UpdateContainerInfo(_outputReagentList, state.OutputContainerInfo);

            // This has to happen here due to people possibly
            // setting sorting before putting any chemicals
            BufferSortButton.Text = state.SortingType switch
            {
                ChemMasterSortingType.Alphabetical => Loc.GetString("chem-master-window-sort-type-alphabetical"),
                ChemMasterSortingType.Quantity => Loc.GetString("chem-master-window-sort-type-quantity"),
                ChemMasterSortingType.Latest => Loc.GetString("chem-master-window-sort-type-latest"),
                _ => Loc.GetString("chem-master-window-sort-type-none")
            };

            var reagentDict = state.BufferReagents.ToDictionary(r => new ReagentListId(r.Reagent), r => r.Quantity);
            _bufferReagentList.Update(reagentDict, state.SortingType);

            _bufferReagentList.UpdateLabels(null, ReagentQuantity.LocalizedQuantity(state.BufferCurrentVolume));
        }

        private void UpdateContainerInfo(ReagentList list, ContainerInfo? info)
        {
            // Having Entities versus Reagents is mutually exclusive
            // Technically the UI would display it fine, though.
            if (info?.Entities is { } entities)
            {
                list.Update(entities.ToDictionary(ent => new ReagentListId(ent.Id), ent => ent.Quantity));
            }
            else if (info?.Reagents is { } reagents)
            {
                list.Update(reagents.ToDictionary(r => new ReagentListId(r.Reagent), v => v.Quantity));
            }
            else
            {
                list.Update([]);
                list.UpdateLabels(_noContainerText, "");
            }

            if (info is { DisplayName: var name })
                list.UpdateLabels($"{name}: ", info.LocalizedCapacity());
        }
    }
}
