using System.Linq;
using Content.Shared.Chemistry.Components;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.Chemistry.UI;

[GenerateTypedNameReferences]
public sealed partial class ReagentStorageControl : ScrollContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private EntityUid? _owner;

    private Solution? _solution;

    private Dictionary<ProtoId<ReagentPrototype>, FixedPoint2> _currentReagents = new();

    public ReagentStorageControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetOwner(EntityUid owner)
    {
        _owner = owner;
    }

    public void SetSolution(Solution solution)
    {
        _solution = solution;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_owner == null)
            return;

        if (_entityManager.Deleted(_owner))
        {
            _owner = null;
            return;
        }

        if (_solution == null)
        {
            Visible = false;
            return;
        }

        Visible = true;

        var newSolutions = new List<string>();
        var remSolutions = new List<string>();

        foreach (var (id, _) in _solution)
        {
            var proto = id.Prototype;
            if (!_currentReagents.ContainsKey(proto) || _currentReagents[proto] == FixedPoint2.Zero)
                newSolutions.Add(proto);
        }

        foreach (var (id, _) in _currentReagents)
        {
            if (!_solution.ContainsReagent(id, null))
                remSolutions.Add(id);
        }

        var children2 = new List<ReagentDisplay>();
        children2.AddRange(ReagentList.Children.OfType<ReagentDisplay>());

        foreach (var display in children2)
        {
            var reagent = display.Reagent;

            if (remSolutions.Contains(reagent))
            {
                ReagentList.RemoveChild(display);
                continue;
            }

            var vol = _solution.GetTotalPrototypeQuantity(reagent);

            if (vol == FixedPoint2.Zero)
                continue;

            display.UpdateVolume(vol, _solution);
        }

        foreach (var reagent in newSolutions)
        {
            var vol = _solution.GetTotalPrototypeQuantity(reagent);
            ReagentList.AddChild(new ReagentDisplay(_owner.Value, reagent, vol, _solution));
        }

        _currentReagents = _solution.GetReagentPrototypes();
        NoReagentsLabel.Visible = ReagentList.ChildCount == 1;
    }
}

