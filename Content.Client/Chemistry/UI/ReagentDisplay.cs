using Content.Client.Stylesheets;
using Content.Shared.Chemistry.Components;
using Content.Shared.Chemistry.EntitySystems;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.Materials;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Chemistry.UI;

[GenerateTypedNameReferences]
public sealed partial class ReagentDisplay : PanelContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly SharedSolutionContainerSystem _solution;

    private EntityUid _ent;
    private FixedPoint2 _volume;
    public readonly ProtoId<ReagentPrototype> Reagent;
    private readonly bool _canEject;

    public ReagentDisplay(EntityUid uid, ProtoId<ReagentPrototype> reagent, FixedPoint2 volume, Solution solution)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _solution = _entityManager.System<SharedSolutionContainerSystem>();

        ColorPanel.PanelOverride = new StyleBoxFlat { BackgroundColor = _prototypeManager.Index(reagent).SubstanceColor };

        _ent = uid;
        Reagent = reagent;
        UpdateVolume(volume, solution);
    }

    public void UpdateVolume(FixedPoint2 volume, Solution solution)
    {
        if (_volume == volume)
            return;

        _volume = volume;
        var proto = _prototypeManager.Index(Reagent);
        var reagentVolume = solution.GetTotalPrototypeQuantity(Reagent);

        var amountText = Loc.GetString("lathe-menu-reagent-volume", ("amount", reagentVolume));
        var mat = Loc.GetString("lathe-menu-material-display", ("material", proto.LocalizedName), ("amount", amountText));
        ProductName.Text = mat;

        PopulateButtons(reagentVolume);
    }

    public void PopulateButtons(FixedPoint2 volume)
    {
        Content.Children.Clear();
        if (!_canEject)
            return;

        int[] sheetsToEjectArray = { 1, 5, 10 };

        for (var i = 0; i < sheetsToEjectArray.Length; i++)
        {
            var sheetsToEject = sheetsToEjectArray[i];

            var styleClass = StyleBase.ButtonOpenBoth;
            if (i == 0)
                styleClass = StyleBase.ButtonOpenRight;
            else if (i == sheetsToEjectArray.Length - 1)
                styleClass = StyleBase.ButtonOpenLeft;

            var button = new Button
            {
                Name = $"{sheetsToEject}",
                Access = AccessLevel.Public,
                Text = Loc.GetString($"{sheetsToEject}"),
                MinWidth = 45,
                StyleClasses = { styleClass }
            };

            button.OnPressed += _ =>
            {
                // TODO: Eject Reagents on the floor or eject beakers or w/e.
            };

            button.Disabled = volume < sheetsToEject;

            if (_prototypeManager.TryIndex<MaterialPrototype>(Reagent, out var proto))
            {
                button.ToolTip = Loc.GetString("lathe-menu-tooltip-display", ("amount", sheetsToEject), ("material", Loc.GetString(proto.Name)));
            }

            Content.AddChild(button);
        }
    }
}

