using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;

namespace Content.Client.StationRecords;

[GenerateTypedNameReferences]
public sealed partial class AddGeneralStationRecord : DefaultWindow
{
    public Action<GeneralStationRecord>? OnValidSubmit = null;

    private readonly Dictionary<ProtoId<JobPrototype>, int> _jobIds = new();
    private readonly Dictionary<ProtoId<SpeciesPrototype>, int> _speciesIds = new();

    public AddGeneralStationRecord()
    {
        RobustXamlLoader.Load(this);

        // Warn on entering an empty name.
        NameEdit.OnTextChanged += _ =>
        {
            if (NameEdit.Text is not "")
            {
                NameEdit.RemoveStyleClass("Caution");
            }
            else
            {
                NameEdit.AddStyleClass("Caution");
            }
        };

        // Prevent non-numeric age input
        var previousAgeValue = "";
        var ensureNumericAge = () =>
        {
            if (!IsNumeric(AgeEdit.Text))
            {
                AgeEdit.Text = previousAgeValue;
            }
            else
            {
                previousAgeValue = AgeEdit.Text;
            }

            AgeEdit.RemoveStyleClass("Caution");
        };
        AgeEdit.OnFocusExit += _ => ensureNumericAge();
        AgeEdit.OnTextEntered += _ =>
        {
            ensureNumericAge();
            AgeEdit.CursorPosition = AgeEdit.Text.Length;
        };
        AgeEdit.OnTextChanged += _ =>
        {
            if (IsNumeric(AgeEdit.Text))
            {
                AgeEdit.RemoveStyleClass("Caution");
            }
            else
            {
                AgeEdit.AddStyleClass("Caution");
            }
        };

        // Initialize gender dropdown
        foreach (Gender gender in Enum.GetValuesAsUnderlyingType<Gender>())
        {
            var genderLowercase = gender.ToString().ToLower();
            GenderEdit.AddItem(Loc.GetString("gender-with-pronouns",
                    ("gender", Loc.GetString($"gender-{genderLowercase}")),
                    ("pronouns", Loc.GetString($"humanoid-profile-editor-pronouns-{genderLowercase}-text"))),
                (int)gender);
        }

        // Make dropdowns actually work
        SetOnItemSelected(SpeciesEdit);
        SetOnItemSelected(JobEdit);
        SetOnItemSelected(GenderEdit);

        // Submission
        SubmitButton.OnPressed += _ =>
        {
            var valid = true;
            if (!int.TryParse(AgeEdit.Text, out var age))
            {
                valid = false;
                AgeEdit.AddStyleClass("Caution");
            }

            if (NameEdit.Text is "")
            {
                valid = false;
                NameEdit.AddStyleClass("Caution");
            }

            if (valid)
            {
                OnValidSubmit?.Invoke(new GeneralStationRecord
                {
                    Gender = (Gender)GenderEdit.SelectedId,
                    JobPrototype = (string)JobEdit.SelectedMetadata!,
                    Age = age,
                    Name = NameEdit.Text,
                    Fingerprint = FingerprintEdit.Text,
                    Species = (string)SpeciesEdit.SelectedMetadata!,
                    DNA = DnaEdit.Text,
                });
            }
        };
    }

    public void SetSelectableJobs(List<JobPrototype> jobs)
    {
        _jobIds.Clear();
        var id = 0;
        jobs.Sort((l, r) => string.Compare(l.LocalizedName, r.LocalizedName, StringComparison.CurrentCulture));
        foreach (var job in jobs)
        {
            if (!job.OverrideConsoleVisibility.GetValueOrDefault(job.SetPreference))
            {
                continue;
            }

            _jobIds.Add(job, id);
            JobEdit.AddItem(job.LocalizedName, id);
            JobEdit.SetItemMetadata(id, job.ID);
            id++;
        }
    }

    public void SetSelectableSpecies(List<SpeciesPrototype> specieses)
    {
        _speciesIds.Clear();
        var id = 0;
        specieses.Sort((l, r) =>
            string.Compare(Loc.GetString(l.Name), Loc.GetString(r.Name), StringComparison.Ordinal));
        foreach (var species in specieses)
        {
            _speciesIds.Add(species, id);
            SpeciesEdit.AddItem(Loc.GetString(species.Name), id);
            SpeciesEdit.SetItemMetadata(id, species.ID);
            id++;
        }
    }

    private static bool IsNumeric(string value) => int.TryParse(value, out _);

    private static void SetOnItemSelected(OptionButton button)
    {
        button.OnItemSelected += args => button.SelectId(args.Id);
    }
}
