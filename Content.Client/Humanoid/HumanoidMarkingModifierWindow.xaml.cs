using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Humanoid;

// hack for a panel that modifies an entity's markings on demand

[GenerateTypedNameReferences]
public sealed partial class HumanoidMarkingModifierWindow : DefaultWindow
{
    public event Action<MarkingSet>? OnMarkingAdded;
    public event Action<MarkingSet>? OnMarkingRemoved;
    public event Action<MarkingSet>? OnMarkingColorChange;
    public event Action<MarkingSet>? OnMarkingRankChange;
    public event Action<HumanoidVisualLayers, CustomBaseLayerInfo?>? OnLayerInfoModified;

    private readonly Dictionary<HumanoidVisualLayers, HumanoidBaseLayerModifier> _modifiers = new();

    public HumanoidMarkingModifierWindow()
    {
        RobustXamlLoader.Load(this);

        foreach (var layer in Enum.GetValues<HumanoidVisualLayers>())
        {
            var modifier = new HumanoidBaseLayerModifier($"markings-category-{layer}");
            BaseLayersContainer.AddChild(modifier);
            _modifiers.Add(layer, modifier);

            modifier.OnLayerUpdated += layerInfo => OnLayerInfoModified?.Invoke(layer, layerInfo);
        }

        MarkingPickerWidget.OnMarkingAdded += set => OnMarkingAdded?.Invoke(set);
        MarkingPickerWidget.OnMarkingRemoved += set => OnMarkingRemoved?.Invoke(set);
        MarkingPickerWidget.OnMarkingColorChange += set => OnMarkingColorChange?.Invoke(set);
        MarkingPickerWidget.OnMarkingRankChange += set => OnMarkingRankChange?.Invoke(set);
        MarkingForced.OnToggled += args => MarkingPickerWidget.Forced = args.Pressed;
        MarkingIgnoreSpecies.OnToggled += args => MarkingPickerWidget.Forced = args.Pressed;

        MarkingPickerWidget.Forced = MarkingForced.Pressed;
        MarkingPickerWidget.IgnoreSpecies = MarkingForced.Pressed;
    }

    public void SetState(MarkingSet markings,
        string species,
        Sex sex,
        Color skinColor,
        Dictionary<HumanoidVisualLayers, CustomBaseLayerInfo> info)
    {
        foreach (var (layer, modifier) in _modifiers)
        {
            if (info.TryGetValue(layer, out var layerInfo))
                modifier.SetState(true, layerInfo.Color ?? skinColor, layerInfo.Id);
            else
                modifier.SetState(false, skinColor);
        }

        // I find it too funny that we're defaulting eye color
        // to white to change it
        var eyeColor = info.GetValueOrDefault(HumanoidVisualLayers.Eyes).Color ?? Color.White;
        MarkingPickerWidget.SetData(markings, species, sex, skinColor, eyeColor);
    }
}
