using System.Linq;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Client.ViewVariables;
using Robust.Shared.Prototypes;

namespace Content.Client.Humanoid;

using LayerProto = ProtoId<HumanoidSpeciesSpriteLayer>;

/// <summary>
/// A control for overriding the species sprite layer prototype and its color
/// for a given layer.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class HumanoidBaseLayerModifier : Control
{
    public event Action<CustomBaseLayerInfo?>? OnLayerUpdated;

    private readonly IPrototypeManager _protoMan = IoCManager.Resolve<IPrototypeManager>();

    private ViewVariablesAddWindow? _protoIdWindow;

    /// <param name="layer">The LocId of the layer this control is for.</param>
    public HumanoidBaseLayerModifier(LocId layer)
    {
        RobustXamlLoader.Load(this);

        LayerLabel.Text = Loc.GetString(layer);

        LayerProtoId.OnTextEntered += _ => LayerUpdated();
        LayerColor.OnColorChanged += _ => LayerUpdated();
        LayerSelectId.OnPressed += _ => ShowProtoIdPopup();
        LayerCheckbox.OnPressed += _ =>
        {
            InfoPanel.Visible = LayerCheckbox.Pressed;
            LayerUpdated();
        };
    }

    private void ShowProtoIdPopup()
    {
        _protoIdWindow?.Close();

        // Look. It's a public class. I'm allowed to use it, okay?!
        _protoIdWindow = new ViewVariablesAddWindow(
            _protoMan.EnumeratePrototypes<HumanoidSpeciesSpriteLayer>().Select(p => p.ID),
            Loc.GetString("vv-protoid-addwindow-title"));
        _protoIdWindow.AddButtonPressed += args =>
        {
            LayerProtoId.Text = args.Entry;
            LayerProtoId.ForceSubmitText();
            _protoIdWindow?.Close();
        };
        _protoIdWindow.OpenCentered();
    }

    private void LayerUpdated()
    {
        if (!LayerCheckbox.Pressed)
            OnLayerUpdated?.Invoke(null);
        else if (_protoMan.HasIndex<HumanoidSpeciesSpriteLayer>(LayerProtoId.Text))
            OnLayerUpdated?.Invoke(new CustomBaseLayerInfo(LayerProtoId.Text, LayerColor.Color));
        else
            // This is bad UX but it's admin tool so it's okay :)
            LayerProtoId.Clear();
    }

    /// <param name="enabled">
    /// True if the layer this control is for is customized.
    /// </param>
    /// <param name="color">The color for the layer; usually skin color.</param>
    /// <param name="layerProto">
    /// The prototype of the layer, if a custom base layer is present.
    /// </param>
    public void SetState(bool enabled, Color color, LayerProto? layerProto = null)
    {
        LayerCheckbox.Pressed = enabled;
        LayerColor.Color = color;
        InfoPanel.Visible = enabled;
        LayerProtoId.Text = layerProto ?? "";
    }
}

