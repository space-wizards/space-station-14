using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.SprayPainter.AtmosPipes.UI;

[GenerateTypedNameReferences]
public sealed partial class AtmosPipePainterWindow : Control
{
    [Dependency] private readonly IEntitySystemManager _sysMan = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    private readonly Dictionary<string, int> _itemColorIndex = new();
    private const string ColorLocKeyPrefix = "pipe-painter-color-";

    private readonly SpriteSpecifier _colorEntryIconTexture = new SpriteSpecifier.Rsi(
        new ResPath("Structures/Piping/Atmospherics/pipe.rsi"),
        "pipeStraight"
    );

    public AtmosPipePainterWindow(
        Shared.SprayPainter.AtmosPipes.AtmosPipePainterComponent component,
        Action<string?> onColorPicked
    )
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        var spriteSystem = _sysMan.GetEntitySystem<SpriteSystem>();

        foreach (var color in component.ColorPalette)
        {
            var locString = GetColorLocString(color.Key);
            var item = ColorList.AddItem(locString, spriteSystem.Frame0(_colorEntryIconTexture));
            item.IconModulate = color.Value;
            item.Metadata = color.Key;

            _itemColorIndex.Add(color.Key, ColorList.IndexOf(item));
        }

        if (component.PickedColor != null)
        {
            ColorList[_itemColorIndex[component.PickedColor]].Selected = true;
            ColorList.OnItemSelected += args => onColorPicked((string?)ColorList[args.ItemIndex].Metadata);
        }
    }

    private string GetColorLocString(string? colorKey)
    {
        if (string.IsNullOrEmpty(colorKey))
            return Loc.GetString("pipe-painter-no-color-selected");

        return _loc.TryGetString(ColorLocKeyPrefix + colorKey, out var locString) ? locString : colorKey;
    }
}
