using System.Numerics;
using Content.Client.Resources;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using static Content.Client.Changelog.ChangelogManager;

namespace Content.Client.Changelog;

[GenerateTypedNameReferences]
public sealed partial class ChangelogEntry : Control
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    public ChangelogEntry()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetText(FormattedMessage text)
    {
        Text.SetMessage(text);
    }

    public void SetIcons(ChangelogLineType type, bool experimental)
    {
        var icon = GetIcon(type);
        Icon.Texture = icon.Item1;
        Icon.ModulateSelfOverride = icon.Item2;

        if (experimental)
        {
            var expIcon = new TextureRect
            {
                Texture = _resourceCache.GetTexture(
                    new ResPath("/Textures/Interface/Changelog/test-tube.svg.192dpi.png")),
                TextureScale = new Vector2(0.5f, 0.5f),
                VerticalAlignment = VAlignment.Top,
                Margin = new Thickness(2, 4, 0, 2),
                ModulateSelfOverride = Color.FromHex("#A0d16E"),
            };

            Icon.Parent!.AddChild(expIcon);
            expIcon.SetPositionInParent(1);
        }
    }

    private (Texture, Color) GetIcon(ChangelogLineType type)
    {
        var (file, color) = type switch
        {
            ChangelogLineType.Add => ("plus.svg.192dpi.png", "#6ED18D"),
            ChangelogLineType.Remove => ("minus.svg.192dpi.png", "#D16E6E"),
            ChangelogLineType.Fix => ("bug.svg.192dpi.png", "#D1BA6E"),
            ChangelogLineType.Tweak => ("wrench.svg.192dpi.png", "#6E96D1"),
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };

        return (_resourceCache.GetTexture(new ResPath($"/Textures/Interface/Changelog/{file}")), Color.FromHex(color));
    }
}
