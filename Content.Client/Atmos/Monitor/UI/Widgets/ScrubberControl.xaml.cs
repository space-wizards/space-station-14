using Content.Client.Stylesheets;
using Content.Shared.Atmos;
using Content.Shared.Atmos.EntitySystems;
using Content.Shared.Atmos.Monitor.Components;
using Content.Shared.Atmos.Piping.Unary.Components;
using Content.Shared.Atmos.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Atmos.Monitor.UI.Widgets;

[GenerateTypedNameReferences]
public sealed partial class ScrubberControl : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;

    private GasVentScrubberData _data;
    private string _address;

    public event Action<string, IAtmosDeviceData>? ScrubberDataChanged;
	public event Action<IAtmosDeviceData>? ScrubberDataCopied;

    private CheckBox _enabled => CEnableDevice;
    private CollapsibleHeading _addressLabel => CAddress;
    private OptionButton _pumpDirection => CPumpDirection;
    private FloatSpinBox _volumeRate => CVolumeRate;
    private FloatSpinBox _targetPressure => CTargetPressure;
    private CheckBox _wideNet => CWideNet;
    private Button _copySettings => CCopySettings;
    private Button _selectAll => CSelectAll;
    private Button _deselectAll => CDeselectAll;

    private GridContainer _gases => CGasContainer;
    private Dictionary<Gas, Button> _gasControls = new();

    public ScrubberControl(GasVentScrubberData data, string address)
    {

        IoCManager.InjectDependencies(this);
        var atmosphereSystem = _entMan.System<SharedAtmosphereSystem>();

        RobustXamlLoader.Load(this);

        Name = address;

        _data = data;
        _address = address;

        _addressLabel.Title = Loc.GetString("air-alarm-ui-atmos-net-device-label", ("address", $"{address}"));

        _enabled.Pressed = data.Enabled;
        _enabled.OnToggled += _ =>
        {
            _data.Enabled = _enabled.Pressed;
            ScrubberDataChanged?.Invoke(_address, _data);
        };

        _wideNet.Pressed = data.WideNet;
        _wideNet.OnToggled += _ =>
        {
            _data.WideNet = _wideNet.Pressed;
            ScrubberDataChanged?.Invoke(_address, _data);
        };

        _volumeRate.Value = _data.VolumeRate;
        _volumeRate.OnValueChanged += _ =>
        {
            _data.VolumeRate = _volumeRate.Value;
            ScrubberDataChanged?.Invoke(_address, _data);
        };
        _volumeRate.IsValid += value => value >= 0;

        _targetPressure.Value = _data.TargetPressure;
        _targetPressure.OnValueChanged += _ =>
        {
            _data.TargetPressure = _targetPressure.Value;
            ScrubberDataChanged?.Invoke(address, _data);
        };

        foreach (var value in Enum.GetValues<ScrubberPumpDirection>())
        {
            _pumpDirection.AddItem(Loc.GetString($"air-alarm-ui-pump-direction-{value.ToString().ToLower()}"), (int) value);
        }

        _pumpDirection.SelectId((int) _data.PumpDirection);
        _pumpDirection.OnItemSelected += args =>
        {
            _pumpDirection.SelectId(args.Id);
            _data.PumpDirection = (ScrubberPumpDirection) args.Id;
            ScrubberDataChanged?.Invoke(_address, _data);
        };
        _pumpDirection.Disabled = data.AirAlarmPanicWireCut;

        _copySettings.OnPressed += _ =>
        {
            ScrubberDataCopied?.Invoke(_data);
        };

        var allGases = Enum.GetValues<Gas>();
        _selectAll.OnPressed += _ =>
        {
            _data.FilterGases = new HashSet<Gas>(allGases);
            ScrubberDataChanged?.Invoke(_address, _data);
        };

        _deselectAll.OnPressed += _ =>
        {
            _data.FilterGases = [];
            ScrubberDataChanged?.Invoke(_address, _data);
        };

        foreach (var value in allGases)
        {
            ProtoId<GasPrototype> gasProtoId = atmosphereSystem.GetGas(value);
            var gasName = _prototypeManager.Index(gasProtoId).Name;

            var gasButton = new Button
            {
                Name = value.ToString(),
                Text = Loc.GetString(gasName),
                ToggleMode = true,
                HorizontalExpand = true
            };
            if (_data.FilterGases.Contains(value))
            {
                gasButton.StyleClasses.Add("ButtonColorGreen");
            }
            else if (!_data.OverflowGases.Contains(value))
            {
                gasButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }
            gasButton.OnPressed += args =>
            {
                var beforeState = 0; // Disabled
                if (_data.OverflowGases.Contains(value))
                {
                    beforeState = 1; // Overflow
                }
                else if (_data.FilterGases.Contains(value))
                {
                    beforeState = 2; // Filter
                }

                _data.FilterGases.Remove(value);
                _data.OverflowGases.Remove(value);
                gasButton.StyleClasses.Remove("ButtonColorGreen");
                gasButton.StyleClasses.Remove(StyleBase.ButtonCaution);
                gasButton.Pressed = false;

                switch (beforeState)
                {
                    case 0: // Disabled -> Overflow
                        _data.OverflowGases.Add(value);
                        break;
                    case 1: // Overflow -> Filter
                        _data.FilterGases.Add(value);
                        gasButton.StyleClasses.Add("ButtonColorGreen");
                        break;
                    case 2: // Filter -> Disabled
                        gasButton.StyleClasses.Add(StyleBase.ButtonCaution);
                        break;
                }

                ScrubberDataChanged?.Invoke(_address, _data);
            };
            _gasControls.Add(value, gasButton);
            _gases.AddChild(gasButton);
        }

    }

    public void ChangeData(GasVentScrubberData data)
    {
        _data.Enabled = data.Enabled;
        _enabled.Pressed = _data.Enabled;

        _data.PumpDirection = data.PumpDirection;
        _pumpDirection.Select((int) _data.PumpDirection);
        _pumpDirection.Disabled = data.AirAlarmPanicWireCut;

        _data.VolumeRate = data.VolumeRate;
        _volumeRate.Value = _data.VolumeRate;

        _data.TargetPressure = data.TargetPressure;
        _targetPressure.Value = _data.TargetPressure;

        _data.WideNet = data.WideNet;
        _wideNet.Pressed = _data.WideNet;
        _data.FilterGases = data.FilterGases;
        _data.OverflowGases = data.OverflowGases;

        foreach (var value in Enum.GetValues<Gas>())
        {
            _gasControls[value].StyleClasses.Remove("ButtonColorGreen");
            _gasControls[value].StyleClasses.Remove(StyleBase.ButtonCaution);
            if (data.FilterGases.Contains(value))
            {
                _gasControls[value].StyleClasses.Add("ButtonColorGreen");
            }
            else if (!data.OverflowGases.Contains(value))
            {
                _gasControls[value].StyleClasses.Add(StyleBase.ButtonCaution);
            }
        }
    }
}
