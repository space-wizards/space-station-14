using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Atmos.UI;

[GenerateTypedNameReferences]
public sealed partial class GasTank : DefaultWindow
{
    public event Action? ToggleInternalsPressed;
    public event Action<float>? OnSetPressure;

    private float _currentPressure;

    public GasTank()
    {
        RobustXamlLoader.Load(this);

        InternalsButton.OnPressed += OnToggleInternals;
        LeftButton.OnPressed += LeftButtonPressed;
        RightButton.OnPressed += RightButtonPressed;
        FloatDisplay.OnTextEntered += OnFloatEnteredOrExited;
        FloatDisplay.OnFocusExit += OnFloatEnteredOrExited;
    }

    public void UpdateDisplay(float pressure, bool internalsConnected)
    {
        _currentPressure = pressure;
        FloatDisplay.Text = pressure.ToString("F1");

        InternalsButton.Text = internalsConnected ? "Connected" : "Disconnected";
    }

    private void OnToggleInternals(BaseButton.ButtonEventArgs args)
    {
        ToggleInternalsPressed?.Invoke();
    }

    private void LeftButtonPressed(BaseButton.ButtonEventArgs args)
    {
        OnSetPressure?.Invoke(_currentPressure - 0.3f);
    }

    private void RightButtonPressed(BaseButton.ButtonEventArgs args)
    {
        OnSetPressure?.Invoke(_currentPressure + 0.3f);
    }

    private void OnFloatEnteredOrExited(LineEdit.LineEditEventArgs args)
    {
        if (float.TryParse(args.Text, out var pressure))
            OnSetPressure?.Invoke(pressure);
        else
            FloatDisplay.Text = _currentPressure.ToString("F1");
    }
}
