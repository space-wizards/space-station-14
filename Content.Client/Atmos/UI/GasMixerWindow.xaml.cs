using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Atmos.UI;

/// <summary>
/// Client-side UI used to control a gas mixer.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class GasMixerWindow : FancyWindow
{
    public bool MixerStatus = true;

    public event Action? ToggleStatusButtonPressed;
    public event Action<float>? MixerOutputPressureChanged;
    public event Action<float>? MixerNodePercentageChanged;

    public float MaxPressure
    {
        get => _maxPressure;
        set
        {
            _maxPressure = value;

            MixerPressureOutputInput.Value = MathF.Min(value, MixerPressureOutputInput.Value);
        }
    }

    private float _maxPressure = Atmospherics.MaxOutputPressure;

    public GasMixerWindow()
    {
        RobustXamlLoader.Load(this);

        ToggleStatusButton.OnPressed += _ => SetMixerStatus(!MixerStatus);
        ToggleStatusButton.OnPressed += _ => ToggleStatusButtonPressed?.Invoke();

        MixerPressureOutputInput.OnValueChanged += _ => SetOutputPressureButton.Disabled = false;
        SetOutputPressureButton.OnPressed += _ =>
        {
            MixerPressureOutputInput.Value = Math.Clamp(MixerPressureOutputInput.Value, 0f, _maxPressure);
            MixerOutputPressureChanged?.Invoke(MixerPressureOutputInput.Value);
            SetOutputPressureButton.Disabled = true;
        };

        SetMaxPressureButton.OnPressed += _ =>
        {
            MixerPressureOutputInput.Value = _maxPressure;
            SetOutputPressureButton.Disabled = false;
        };

        MixerNodeOneInput.OnValueChanged += _ =>
        {
            SetMixerPercentageButton.Disabled = false;
            MixerNodeTwoInput.Value = 100f - MixerNodeOneInput.Value;
        };
        MixerNodeTwoInput.OnValueChanged += _ =>
        {
            SetMixerPercentageButton.Disabled = false;
            MixerNodeOneInput.Value = 100f - MixerNodeTwoInput.Value;
        };

        SetMixerPercentageButton.OnPressed += _ =>
        {
            var value = Math.Clamp(MixerNodeOneInput.Value * .01f, 0f, 1f);
            SetNodePercentages(value);
            MixerNodePercentageChanged?.Invoke(value);
            SetMixerPercentageButton.Disabled = true;
        };
    }

    public void SetOutputPressure(float pressure)
    {
        MixerPressureOutputInput.Value = pressure;
    }

    public void SetNodePercentages(float nodeOne)
    {
        MixerNodeOneInput.Value = nodeOne * 100f;
        MixerNodeTwoInput.Value = (1f - nodeOne) * 100f;
    }

    public void SetMixerStatus(bool enabled)
    {
        MixerStatus = enabled;
        if (enabled)
        {
            ToggleStatusButton.Text = Loc.GetString("comp-gas-mixer-ui-status-enabled");
        }
        else
        {
            ToggleStatusButton.Text = Loc.GetString("comp-gas-mixer-ui-status-disabled");
        }
    }
}
