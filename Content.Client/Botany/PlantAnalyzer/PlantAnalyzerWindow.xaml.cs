using Content.Client.UserInterface.Controls;
using Content.Shared.Atmos.Prototypes;
using Content.Shared.Botany.PlantAnalyzer;
using Content.Shared.IdentityManagement;
using Content.Shared.Localizations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Botany.PlantAnalyzer;

[GenerateTypedNameReferences]
public sealed partial class PlantAnalyzerWindow : FancyWindow
{
    private readonly IEntityManager _entityManager;
    private readonly IPrototypeManager _prototypeManager;

    public PlantAnalyzerWindow()
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();
        _prototypeManager = dependencies.Resolve<IPrototypeManager>();
    }

    public void Populate(PlantAnalyzerScannedUserMessage msg)
    {
        var target = _entityManager.GetEntity(msg.TargetEntity);
        if (target is null)
        {
            return;
        }

        // Section 1: Icon and basic information.
        SpriteView.SetEntity(target.Value);
        SpriteView.Visible = msg.ScanMode.HasValue && msg.ScanMode.Value;
        NoDataIcon.Visible = !SpriteView.Visible;

        ScanModeLabel.Text = msg.ScanMode.HasValue
            ? msg.ScanMode.Value
                ? Loc.GetString("health-analyzer-window-scan-mode-active")
                : Loc.GetString("health-analyzer-window-scan-mode-inactive")
            : Loc.GetString("health-analyzer-window-entity-unknown-text");
        ScanModeLabel.FontColorOverride = msg.ScanMode.HasValue && msg.ScanMode.Value ? Color.Green : Color.Red;

        SeedLabel.Text = msg.PlantData == null
            ? Loc.GetString("plant-analyzer-component-no-seed")
            : Loc.GetString(msg.PlantData.SeedDisplayName);

        ContainerLabel.Text = _entityManager.HasComponent<MetaDataComponent>(target.Value)
            ? Identity.Name(target.Value, _entityManager)
            : Loc.GetString("generic-unknown");

        // Section 2: Information regarding the plant.
        if (msg.PlantData is not null)
        {
            Health.Text = msg.PlantData.Health.ToString("0.00");
            Endurance.Text = msg.PlantData.Endurance.ToString("0.00");
            Age.Text = msg.PlantData.Age.ToString("0.00");
            Lifespan.Text = msg.PlantData.Lifespan.ToString("0.00");

            // These mostly exists to prevent shifting of the text.
            Dead.Visible = msg.PlantData.Dead;
            Alive.Visible = !Dead.Visible;

            Unviable.Visible = !msg.PlantData.Viable;
            Mutating.Visible = msg.PlantData.Mutating;

            PlantDataGrid.Visible = true;
        }
        else
        {
            PlantDataGrid.Visible = false;
        }
        PlantDataTags.Visible = PlantDataGrid.Visible;
        PlantDataDivider.Visible = PlantDataGrid.Visible;

        // Section 3: Input
        if (msg.TrayData is not null)
        {
            WaterLevelLabel.Text = msg.TrayData.WaterLevel.ToString("0.00");
            NutritionLevelLabel.Text = msg.TrayData.NutritionLevel.ToString("0.00");
            ToxinsLabel.Text = msg.TrayData.Toxins.ToString("0.00");
            PestLevelLabel.Text = msg.TrayData.PestLevel.ToString("0.00");
            WeedLevelLabel.Text = msg.TrayData.WeedLevel.ToString("0.00");

            // Section 3.1: Tolerances part 1.
            if (msg.TolerancesData is not null)
            {
                GtFieldIfTolerances1.Text = ">";
                LtFieldIfTolerances1.Text = "<";

                WaterConsumptionLabel.Text = msg.TolerancesData.WaterConsumption.ToString("0.00");
                NutritionConsumptionLabel.Text = msg.TolerancesData.NutrientConsumption.ToString("0.00");
                ToxinsResistanceLabel.Text = (msg.TolerancesData.ToxinsTolerance + 1).ToString("0.00");
                PestResistanceLabel.Text = (msg.TolerancesData.PestTolerance + 1).ToString("0.00");
                WeedResistanceLabel.Text = msg.TolerancesData.WeedTolerance.ToString("0.00"); // Only one that is checked diffently...
            }
            else
            {
                GtFieldIfTolerances1.Text = "";
                LtFieldIfTolerances1.Text = "";

                WaterConsumptionLabel.Text = "";
                NutritionConsumptionLabel.Text = "";
                ToxinsResistanceLabel.Text = "";
                PestResistanceLabel.Text = "";
                WeedResistanceLabel.Text = "";
            }
            GtFieldIfTolerances2.Text = GtFieldIfTolerances1.Text;
            LtFieldIfTolerances2.Text = LtFieldIfTolerances1.Text;
            LtFieldIfTolerances3.Text = LtFieldIfTolerances1.Text;

            ContainerGrid.Visible = true;
        }
        else
        {
            ContainerGrid.Visible = false;
        }
        ContainerDivider.Visible = ContainerGrid.Visible;

        // Section 4: Tolerances part 2.
        if (msg.TolerancesData is not null)
        {
            var kpa = (msg.TolerancesData.LowPressureTolerance + msg.TolerancesData.HighPressureTolerance) / 2;
            var kpaTolerance = kpa - msg.TolerancesData.LowPressureTolerance;

            // TODO: There has to be a better way to get the name of a gas...
            List<int> gasIds = [];
            foreach (var gas in msg.TolerancesData.ConsumeGasses)
                gasIds.Add((int)gas);

            List<string> gases = [];
            foreach (var gas in _prototypeManager.EnumeratePrototypes<GasPrototype>())
                if (gasIds.Contains(int.Parse(gas.ID)))
                    gases.Add(Loc.GetString(gas.Name));

            (string, string)[] parameters = [
                ("seedName", SeedLabel.Text),
                ("gases", ContentLocalizationManager.FormatList(gases)),
                ("kpa", kpa.ToString("0.00")),
                ("kpaTolerance", kpaTolerance.ToString("0.00")),
                ("temp", msg.TolerancesData.IdealHeat.ToString("0.00")),
                ("tempTolerance", msg.TolerancesData.HeatTolerance.ToString("0.00")),
                ("lightLevel", msg.TolerancesData.IdealLight.ToString("0.00")),
                ("lightTolerance", msg.TolerancesData.LightTolerance.ToString("0.00"))
            ];
            EnvironmentLabel.Text = msg.TolerancesData.ConsumeGasses.Count == 0
                ? msg.TolerancesData.IdealHeat - msg.TolerancesData.HeatTolerance <= 0f && msg.TolerancesData.LowPressureTolerance <= 0f
                    ? Loc.GetString("plant-analyzer-component-environemt-void", [.. parameters])
                    : Loc.GetString("plant-analyzer-component-environemt", [.. parameters])
                : Loc.GetString("plant-analyzer-component-environemt-gas", [.. parameters]);

            EnvironmentBox.Visible = true;
        }
        else
        {
            EnvironmentBox.Visible = false;
        }
        EnvironmentDivider.Visible = EnvironmentBox.Visible;

        // Section 5: Output (Gasses, Chemicals, Yield, Potency, Product, Seedless?)
        // Label printer at the bottom (like the forensic scanner)
        // TODO: PA
    }
}
