using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.GameObjects.Components.Localization;
using Robust.Shared.Player;

namespace Content.Client.Lobby.UI.Pronouns;

[GenerateTypedNameReferences]
public sealed partial class PronounWindow : FancyWindow
{
    public HumanoidCharacterProfile Profile;

    // loc strings
    private const string GetSubject = "humanoid-profile-editor-pronouns-subject-placeholder";
    private const string GetObject = "humanoid-profile-editor-pronouns-object-placeholder";
    private const string GetDatObj = "humanoid-profile-editor-pronouns-datobj-placeholder";
    private const string GetGenitive = "humanoid-profile-editor-pronouns-genitive-placeholder";
    private const string GetPossAdj = "humanoid-profile-editor-pronouns-possadj-placeholder";
    private const string GetPossPronoun = "humanoid-profile-editor-pronouns-posspronoun-placeholder";
    private const string GetReflexive = "humanoid-profile-editor-pronouns-reflexive-placeholder";
    private const string GetCounter = "humanoid-profile-editor-pronouns-counter-placeholder";

    // CCvar
    private readonly bool _showAdditionalPronouns;
    private readonly bool _restrictedPronouns;
    private readonly int _pronounLength;

    public event Action<HumanoidCharacterProfile>? OnProfileChanged;

    public PronounWindow(HumanoidCharacterProfile profile, Pronoun pronouns, Gender? profileGender, ICommonSession session, IDependencyCollection collection)
    {
        RobustXamlLoader.Load(this);
        Profile = profile;
        var configManager = collection.Resolve<IConfigurationManager>();

        _showAdditionalPronouns = configManager.GetCVar(CCVars.ShowAdditionalPronouns);
        _restrictedPronouns = configManager.GetCVar(CCVars.RestrictedPronouns);
        _pronounLength = configManager.GetCVar(CCVars.MaxPronounLength);

        // genitive, dative, and counter arent used in en-us, so we hide them
        if (!_showAdditionalPronouns)
            OptionalParams.Visible = false;

        PronounDescription.Text = Loc.GetString("humanoid-profile-editor-pronouns-description");
        SubjectLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-subject-label");
        SubjectExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-subject-example");
        ObjectLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-object-label");
        ObjectExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-object-example");
        DatObjLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-datobj-label");
        DatObjExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-datobj-example");
        GenitiveLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-genitive-label");
        GenitiveExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-genitive-example");
        PossAdjLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-possadj-label");
        PossAdjExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-possadj-example");
        PossPronounLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-posspronoun-label");
        PossPronounExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-posspronoun-example");
        ReflexiveLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-reflexive-label");
        ReflexiveExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-reflexive-example");
        CounterLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-counter-label");
        CounterExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-counter-example");
        PluralLabel.Text = Loc.GetString("humanoid-profile-editor-pronouns-plural-label");
        PluralExample.Text = Loc.GetString("humanoid-profile-editor-pronouns-plural-example");

        var gender = profileGender ?? Gender.Epicene;
        var genderString = gender.ToString().ToLowerInvariant();

        SubjectLine.PlaceHolder = Loc.GetString(GetSubject, ("gender", genderString));
        ObjectLine.PlaceHolder = Loc.GetString(GetObject, ("gender", genderString));
        DatObjLine.PlaceHolder = Loc.GetString(GetDatObj, ("gender", genderString));
        GenitiveLine.PlaceHolder = Loc.GetString(GetGenitive, ("gender", genderString));
        PossAdjLine.PlaceHolder = Loc.GetString(GetPossAdj, ("gender", genderString));
        PossPronounLine.PlaceHolder = Loc.GetString(GetPossPronoun, ("gender", genderString));
        ReflexiveLine.PlaceHolder = Loc.GetString(GetReflexive, ("gender", genderString));
        CounterLine.PlaceHolder = Loc.GetString(GetCounter, ("gender", genderString));

        SubjectLine.Text = pronouns.Subject ?? string.Empty;
        ObjectLine.Text = pronouns.Object ?? string.Empty;
        DatObjLine.Text = pronouns.DatObj ?? string.Empty;
        GenitiveLine.Text = pronouns.Genitive ?? string.Empty;
        PossAdjLine.Text = pronouns.PossAdj ?? string.Empty;
        PossPronounLine.Text = pronouns.PossPronoun ?? string.Empty;
        ReflexiveLine.Text = pronouns.Reflexive ?? string.Empty;
        CounterLine.Text = pronouns.Counter ?? string.Empty;

        SubjectLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithSubject(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        SubjectLine.IsValid = args => args.Length <= _pronounLength;

        ObjectLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithObject(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        ObjectLine.IsValid = args => args.Length <= _pronounLength;

        DatObjLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithDatObj(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        DatObjLine.IsValid = args => args.Length <= _pronounLength;

        GenitiveLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithGenitive(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        GenitiveLine.IsValid = args => args.Length <= _pronounLength;

        PossAdjLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithPossAdj(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        PossAdjLine.IsValid = args => args.Length <= _pronounLength;

        PossPronounLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithPossPronoun(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        PossPronounLine.IsValid = args => args.Length <= _pronounLength;

        ReflexiveLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithReflexive(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        ReflexiveLine.IsValid = args => args.Length <= _pronounLength;

        CounterLine.OnTextChanged += args =>
        {
            var pronouns = Profile.Pronoun?.WithCounter(args.Text);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
        CounterLine.IsValid = args => args.Length <= _pronounLength;

        PluralOption.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-plural-option-singular"));
        PluralOption.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-plural-option-plural"));

        PluralOption.OnItemSelected += args =>
        {
            PluralOption.SelectId(args.Id);
            var plural = args.Id switch
            {
                2 => true,
                _ => false,
            };
            var pronouns = Profile.Pronoun?.WithPlural(plural);
            Profile = Profile.WithPronouns(pronouns);
            OnProfileChanged?.Invoke(Profile);
        };
    }
}
