using Content.Shared.Clothing;
using Content.Shared.Preferences.Loadouts;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;
using System.Text;

namespace Content.Client.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutContainer : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    private readonly EntityUid? _entity;

    //public Button Select => SelectButton;
    //public RichTextLabel Item => ItemLabel;

    public LoadoutContainer(ProtoId<LoadoutPrototype> proto, bool disabled, FormattedMessage? reason)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        //SelectButton.Disabled = disabled;

        if (disabled && reason != null)
        {
            var tooltip = new Tooltip();
            tooltip.SetMessage(reason);
            //SelectButton.TooltipSupplier = _ => tooltip;
        }

        if (_protoManager.TryIndex(proto, out var loadProto))
        {
            var ent = loadProto.DummyEntity ?? _entManager.System<LoadoutSystem>().GetFirstOrNull(loadProto);

            if (ent == null)
                return;

            _entity = _entManager.SpawnEntity(ent, MapCoordinates.Nullspace);
            //Sprite.SetEntity(_entity);

            var spriteTooltip = new Tooltip();
            spriteTooltip.SetMessage(FormattedMessage.FromUnformatted(_entManager.GetComponent<MetaDataComponent>(_entity.Value).EntityDescription));

            TooltipSupplier = _ => spriteTooltip;
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (!disposing)
            return;

        _entManager.DeleteEntity(_entity);
    }

    //public bool Pressed
    //{
    //    get => SelectButton.Pressed;
    //    set => SelectButton.Pressed = value;
    //}

    //public string? Text
    //{
    //    get => SelectButton.Text;
    //    set => SelectButton.Text = value;
    //}
}


public sealed class CustomLabel : Label
{
    private Font ActualFont
    {
        get
        {
            if (FontOverride != null)
                return FontOverride;
            if (TryGetStyleProperty<Font>(StylePropertyFont, out var font))
                return font;
            return UserInterfaceManager.ThemeDefaults.LabelFont;
        }
    }
    public new string? Text
    {
        get => base.Text;
        set => base.Text = WordWrapByRuneCount(value ?? string.Empty);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);
        handle.DrawRect(PixelSizeBox, new Color(255, 0, 0, 50));
    }

    private string WordWrapByRuneCount(string text)
    {
        if (string.IsNullOrEmpty(text))
            return "";

        var runes = text.EnumerateRunes().ToArray();
        var sb = new StringBuilder();
        var max = GetMaxRunesPerLine();

        for (int i = 0; i < runes.Length; i += max)
        {
            int take = Math.Min(max, runes.Length - i);
            for (int j = 0; j < take; j++)
                sb.Append(runes[i + j]);
            sb.Append('\n');
        }

        return sb.ToString().TrimEnd('\n');
    }
    private int GetMaxRunesPerLine()
    {
        var maxWidth = PixelSize.X;
        if (maxWidth <= 0 || UIScale <= 0)
            return 1;

        if (ActualFont.TryGetCharMetrics(new Rune('W'), UIScale, out var metrics, true))
        {
            var advance = metrics.Advance > 0
                ? metrics.Advance
                : metrics.Width;

            if (advance > 0)
                return Math.Max(1, (int)(maxWidth / advance));
        }

        return Math.Max(1, (int)(maxWidth / (UIScale * 8)));
    }
}
