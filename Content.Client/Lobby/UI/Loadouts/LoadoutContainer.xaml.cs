using Content.Client.Examine;
using Content.Client.Guidebook;
using Content.Shared.Clothing;
using Content.Shared.Input;
using Content.Shared.Preferences.Loadouts;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutContainer : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;

    private readonly ExamineSystem _examineSystem;
    private readonly GuidebookSystem _guidebookSystem;

    private readonly EntityUid? _entity;

    public Button Select => SelectButton;

    public string? Text
    {
        get => SelectButton.Text;
        set => SelectButton.Text = value;
    }

    public LoadoutContainer(ProtoId<LoadoutPrototype> proto, bool disabled, FormattedMessage? reason)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _examineSystem = _systemManager.GetEntitySystem<ExamineSystem>();
        _guidebookSystem = _systemManager.GetEntitySystem<GuidebookSystem>();

        SelectButton.Disabled = disabled;

        SelectButton.OnKeyBindDown += KeyBindDown;

        if (disabled && reason != null)
        {
            var tooltip = new Tooltip();
            tooltip.SetMessage(reason);
            SelectButton.TooltipSupplier = _ => tooltip;
        }

        if (_protoManager.TryIndex(proto, out var loadProto))
        {
            var ent = loadProto.DummyEntity ?? _entManager.System<LoadoutSystem>().GetFirstOrNull(loadProto);

            if (ent == null)
                return;

            _entity = _entManager.SpawnEntity(ent, MapCoordinates.Nullspace);
            Sprite.SetEntity(_entity);

            var spriteTooltip = new Tooltip();
            spriteTooltip.SetMessage(FormattedMessage.FromUnformatted(_entManager.GetComponent<MetaDataComponent>(_entity.Value).EntityDescription));

            TooltipSupplier = _ => spriteTooltip;
        }
    }

    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);
        // get an entity associated with this element
        var entity = _entity;

        // Deleted() automatically checks for null & existence.
        if (_entManager.Deleted(entity))
            return;

        // do examination?
        if (args.Function == ContentKeyFunctions.ExamineEntity)
        {
            _examineSystem.DoExamine(entity.Value,
                userOverride: _guidebookSystem.GetGuidebookUser());
            args.Handle();
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        SelectButton.OnKeyBindDown -= KeyBindDown;
        if (!disposing)
            return;

        _entManager.DeleteEntity(_entity);
    }
}
