using Content.Shared.Clothing;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using System.Linq;

namespace Content.Client.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutGroupContainer : BoxContainer
{
    private const string CLOSED_GROUP_MARK = "▶";
    private const string OPENED_GROUP_MARK = "▼";

    /// <summary>
    /// A dictionary that stores open groups
    /// </summary>
    private Dictionary<string, bool> _openedGroups = new();

    private readonly LoadoutGroupPrototype _groupProto;

    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutPressed;
    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutUnpressed;

    public LoadoutGroupContainer(HumanoidCharacterProfile profile, RoleLoadout loadout, LoadoutGroupPrototype groupProto, ICommonSession session, IDependencyCollection collection)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _groupProto = groupProto;

        RefreshLoadouts(profile, loadout, session, collection);
    }

    /// <summary>
    /// Updates button availabilities and buttons.
    /// </summary>
    public void RefreshLoadouts(HumanoidCharacterProfile profile, RoleLoadout loadout, ICommonSession session, IDependencyCollection collection)
    {
        var protoMan = collection.Resolve<IPrototypeManager>();
        var loadoutSystem = collection.Resolve<IEntityManager>().System<LoadoutSystem>();
        RestrictionsContainer.DisposeAllChildren();

        if (_groupProto.MinLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-min-limit", ("count", _groupProto.MinLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (_groupProto.MaxLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-max-limit", ("count", _groupProto.MaxLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (protoMan.TryIndex(loadout.Role, out var roleProto) && roleProto.Points != null && loadout.Points != null)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-points-limit", ("count", loadout.Points.Value), ("max", roleProto.Points.Value)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        LoadoutsContainer.DisposeAllChildren();

        var validProtos = _groupProto.Loadouts.Select(id => protoMan.Index(id));

        var groups = validProtos
        .GroupBy(p => string.IsNullOrEmpty(p.GroupBy)
                         ? p.ID
                         : p.GroupBy)
        .ToDictionary(g => g.Key, g => g.ToList());

        BoxContainer? contentContainer = null;

        foreach (var kvp in groups)
        {
            contentContainer = new BoxContainer
            {
                HorizontalExpand = true,
                VerticalExpand = true
            };
            LoadoutsContainer.AddChild(contentContainer);

            var protos = kvp.Value;

            if (protos.Count > 1)
            {
                var row = contentContainer;

                var uiElements = protos
                    .Select(proto =>
                    {
                        var elem = CreateLoadoutUI(proto, profile, loadout, session, collection, loadoutSystem);
                        elem.HorizontalExpand = true;
                        return elem;
                    })
                    .ToList();

                var firstElement = uiElements.FirstOrDefault(e => e.Select.Pressed) ?? uiElements[0];

                var otherElements = uiElements.Where(e => !ReferenceEquals(e, firstElement)).ToList();

                firstElement.HorizontalExpand = true;
                var toggle = CreateToggleButton();

                var subContainer = new SubLoadoutContainer(toggle)
                {
                    Visible = _openedGroups.GetValueOrDefault(kvp.Key, false)
                };
                toggle.Text = subContainer.Visible ? OPENED_GROUP_MARK : CLOSED_GROUP_MARK;

                LoadoutsContainer.AddChild(subContainer);

                toggle.OnPressed += _ =>
                {
                    var willOpen = !subContainer.Visible;
                    subContainer.Visible = willOpen;
                    toggle.Text = willOpen ? OPENED_GROUP_MARK : CLOSED_GROUP_MARK;
                    _openedGroups[kvp.Key] = willOpen;
                };

                var subList = subContainer.Grid;

                firstElement.AddChild(toggle);
                toggle.SetPositionFirst();
                contentContainer.AddChild(firstElement);
                foreach (var proto in otherElements)
                    subList.AddChild(proto);
                UpdateToggleColor(toggle, subList);
            }
            else
            {
                contentContainer.AddChild(
                    CreateLoadoutUI(protos[0], profile, loadout, session, collection, loadoutSystem)
                );
            }
        }
    }

    private static ToggleLoadoutButton CreateToggleButton()
    {
        return new ToggleLoadoutButton
        {
            Text = CLOSED_GROUP_MARK
        };
    }

    private void UpdateToggleColor(Button toggle, BoxContainer subList)
    {
        var anyActive = subList.Children
            .OfType<LoadoutContainer>()
            .Any(c => c.Select.Pressed);

        toggle.Modulate = anyActive
            ? Color.Green
            : Color.White;
    }

    private LoadoutContainer CreateLoadoutUI(LoadoutPrototype proto, HumanoidCharacterProfile profile, RoleLoadout loadout, ICommonSession session, IDependencyCollection collection, LoadoutSystem loadoutSystem)
    {
        var selected = loadout.SelectedLoadouts[_groupProto.ID];

        var pressed = selected.Any(e => e.Prototype == proto.ID);

        var enabled = loadout.IsValid(profile, session, proto.ID, collection, out var reason);

        var cont = new LoadoutContainer(proto, !enabled, reason);

        cont.Text = loadoutSystem.GetName(proto);

        cont.Select.Pressed = pressed;

        cont.Select.OnPressed += args =>
        {
            if (args.Button.Pressed)
                OnLoadoutPressed?.Invoke(proto.ID);
            else
                OnLoadoutUnpressed?.Invoke(proto.ID);
        };

        return cont;
    }
}
