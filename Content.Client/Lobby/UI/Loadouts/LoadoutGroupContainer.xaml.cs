using Content.Client.Guidebook;
using Content.Shared.Clothing;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using System.Linq;

namespace Content.Client.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutGroupContainer : BoxContainer
{
    const int Columns = 1;
    private Dictionary<GridContainer, PanelContainer?> _openSubLists = new();

    private readonly LoadoutGroupPrototype _groupProto;

    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;

    private readonly ISawmill _sawmill;

    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutPressed;
    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutUnpressed;

    public LoadoutGroupContainer(HumanoidCharacterProfile profile, RoleLoadout loadout, LoadoutGroupPrototype groupProto, ICommonSession session, IDependencyCollection collection)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _groupProto = groupProto;
        _sawmill = Logger.GetSawmill("Loadouts");

        RefreshLoadouts(profile, loadout, session, collection);
    }

    /// <summary>
    /// Updates button availabilities and buttons.
    /// </summary>
    public void RefreshLoadouts(HumanoidCharacterProfile profile, RoleLoadout loadout, ICommonSession session, IDependencyCollection collection)
    {
        _openSubLists = new();
        var protoMan = collection.Resolve<IPrototypeManager>();
        var loadoutSystem = collection.Resolve<IEntityManager>().System<LoadoutSystem>();
        RestrictionsContainer.DisposeAllChildren();

        if (_groupProto.MinLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-min-limit", ("count", _groupProto.MinLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (_groupProto.MaxLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-max-limit", ("count", _groupProto.MaxLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (protoMan.TryIndex(loadout.Role, out var roleProto) && roleProto.Points != null && loadout.Points != null)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-points-limit", ("count", loadout.Points.Value), ("max", roleProto.Points.Value)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        LoadoutsContainer.DisposeAllChildren();

        var validProtos = _groupProto.Loadouts
        .Where(id => protoMan.TryIndex(id, out _))
        .Select(id => protoMan.Index<LoadoutPrototype>(id));

        var groups = validProtos
        .GroupBy(p => string.IsNullOrEmpty(p.GroupByTag)
                         ? p.ID
                         : p.GroupByTag)
        .ToDictionary(g => g.Key, g => g.ToList());

        GridContainer? contentContainer = null;
        int countRows = 0;

        foreach (var kvp in groups)
        {
            if (contentContainer == null || contentContainer.ChildCount >= Columns)
            {
                contentContainer = new GridContainer
                {
                    Columns = Columns,
                    HorizontalExpand = true,
                    VerticalExpand = true
                };
                LoadoutsContainer.AddChild(contentContainer);
                _openSubLists.Add(contentContainer, null);
                countRows++;
            }

            var protos = kvp.Value;

            if (protos.Count > 1)
            {
                var row = contentContainer;

                var uiElements = protos
                    .Select(proto =>
                    {
                        var elem = CreateLoadoutUI(proto, profile, loadout, session, collection, loadoutSystem);
                        elem.HorizontalExpand = true;
                        return elem;
                    })
                    .ToList();

                var first = uiElements.FirstOrDefault(e => e.Select.Pressed) ?? uiElements[0];

                var otherElements = uiElements.Where(e => !ReferenceEquals(e, first)).ToList();

                first.HorizontalExpand = true;
                var toggle = new Button
                {
                    Text = "▶",
                    VerticalExpand = false,
                    HorizontalExpand = false,
                    HorizontalAlignment = HAlignment.Right,
                    VerticalAlignment = VAlignment.Bottom,
                };
                var subContainer = new SubLoadoutContainer(toggle)
                {
                    Visible = false
                };
                var subList = subContainer.Grid;
                LoadoutsContainer.AddChild(subContainer);

                toggle.OnPressed += _ =>
                {
                    var prev = _openSubLists[row];
                    if (prev != null && prev != subContainer)
                        prev.Visible = false;

                    bool willOpen = !subContainer.Visible;
                    subContainer.Visible = willOpen;
                    toggle.Text = willOpen ? "▼" : "▶";
                    _openSubLists[row] = willOpen ? subContainer : null;
                };

                first.Select.AddChild(toggle);
                contentContainer.AddChild(first);
                foreach (var proto in otherElements)
                    subList.AddChild(proto);
                UpdateToggleColor(toggle, subList);
            }
            else
            {
                contentContainer.AddChild(
                    CreateLoadoutUI(protos[0], profile, loadout, session, collection, loadoutSystem)
                );
            }
        }
        if (countRows > 1 && contentContainer != null && contentContainer.ChildCount > 0 && contentContainer.ChildCount < Columns)
        {
            for (int i = contentContainer.ChildCount; i < Columns; i++)
            {
                contentContainer.AddChild(new Control
                {
                    HorizontalExpand = true
                });
            }
        }
    }

    void UpdateToggleColor(Button toggle, BoxContainer subList)
    {
        var anyActive = subList.Children
            .OfType<LoadoutContainer>()
            .Any(c => c.Select.Pressed);

        toggle.Modulate = anyActive
            ? Color.Green
            : Color.White;
    }

    private LoadoutContainer CreateLoadoutUI(LoadoutPrototype proto, HumanoidCharacterProfile profile, RoleLoadout loadout, ICommonSession session, IDependencyCollection collection, LoadoutSystem loadoutSystem)
    {
        var selected = loadout.SelectedLoadouts[_groupProto.ID];

        bool pressed = selected.Any(e => e.Prototype == proto.ID);

        bool enabled = loadout.IsValid(profile, session, proto.ID, collection, out var reason);

        var cont = new LoadoutContainer(proto, !enabled, reason);

        cont.Text = loadoutSystem.GetName(proto);

        cont.Select.Pressed = pressed;

        cont.Select.OnPressed += args =>
        {
            if (args.Button.Pressed)
                OnLoadoutPressed?.Invoke(proto.ID);
            else
                OnLoadoutUnpressed?.Invoke(proto.ID);
        };

        return cont;
    }
}
