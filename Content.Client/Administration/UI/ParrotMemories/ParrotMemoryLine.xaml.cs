using Content.Client.UserInterface.Systems.Bwoink;
using Content.Shared.Administration.ParrotMemories;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;

namespace Content.Client.Administration.UI.ParrotMemories;

[GenerateTypedNameReferences]
public sealed partial class ParrotMemoryLine : BoxContainer
{
    private readonly IUserInterfaceManager _uiManager;

    public ParrotMemoryLine(ExtendedParrotMemory memory)
    {
        RobustXamlLoader.Load(this);

        // IUserInterfaceManager is used to open an ahelp later
        IoCManager.Resolve(ref _uiManager);

        ParrotMemoryText.Text = memory.Text;
        ParrotMemoryPlayerButton.Text = memory.SourcePlayerUserName;
        ParrotMemoryDate.Text = memory.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss");

        ParrotMemoryPlayerButton.OnPressed += (_) =>
        {
            _uiManager.GetUIController<AHelpUIController>().Open(new NetUserId(memory.SourcePlayerGuid));
        };

        // default text and tooltip refer to unblocked memories, so return if this memory is unblocked
        if (!memory.Blocked)
            return;

        ParrotBlockButton.Text = Loc.GetString("parrot-memory-line-unblock");
        ParrotBlockButton.ToolTip = Loc.GetString("parrot-memory-line-unblock-tooltip");
    }
}
