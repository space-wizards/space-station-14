using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Administration.UI.ParrotMemories;

[GenerateTypedNameReferences]
public sealed partial class ParrotMemoryWindow : FancyWindow
{
    public int RoundId { get; private set; }

    private int _messageCount;

    public ParrotMemoryWindow(int roundId)
    {
        RobustXamlLoader.Load(this);

        RoundId = roundId;
    }

    public void SetRound(int newRoundId)
    {
        RoundId = newRoundId;
        RoundLineEdit.Text = RoundId.ToString();
    }

    public ParrotMemoryList? GetActiveList()
    {
        var currentActiveTab = MemoryTabContainer.CurrentTab;
        var currentActiveChild = MemoryTabContainer.GetChild(currentActiveTab);

        if (currentActiveChild is not ParrotMemoryList { } parrotMemoryList)
            return null;

        return parrotMemoryList;
    }

    public void UpdateMemoryCountText(int messageCount)
    {
        _messageCount = messageCount;
        MemoryCountLabel.Text = Loc.GetString("parrot-memory-num-memories", ("memoryCount", _messageCount));
    }

    public void DecrementMemoryCount(int i)
    {
        _messageCount -= i;
        UpdateMemoryCountText(_messageCount);
    }

    /// <summary>
    /// Sets lists to dirty so that they receive new messages
    /// </summary>
    /// <param name="inactiveOnly">Only set inactive lists to dirty. Used when blocking/unblocking messages</param>
    public void SetListsDirty(bool inactiveOnly = false)
    {
        for (var i = 0; i < MemoryTabContainer.ChildCount; i++)
        {
            if (inactiveOnly && i == MemoryTabContainer.CurrentTab)
                continue;

            var child = MemoryTabContainer.GetChild(i);

            if (child is not ParrotMemoryList { Dirty: false } parrotMemoryList)
                continue;

            parrotMemoryList.Dirty = true;
        }
    }

    public void SetActiveListDirty()
    {
        if (GetActiveList() is { } parrotMemoryList)
            parrotMemoryList.Dirty = true;
    }
}
