using Content.Shared.Administration.ParrotMessages;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.Administration.UI.ParrotMessages;

[GenerateTypedNameReferences]
public sealed partial class ParrotMessageList : BoxContainer
{
    public bool ShowBlocked { get; set; }
    public bool Initialized { get; private set; }
    public bool Dirty { get; set; }

    private int _messageCount;

    private void UpdateMessageCountText(int messageCount)
    {
        _messageCount = messageCount;
        MessageCountLabel.Text = Loc.GetString("parrot-messages-num-messages", ("messageCount", _messageCount));
    }

    private ParrotMessageLine AddMessageLine(ExtendedPlayerMessage memory)
    {
        var messageLine = new ParrotMessageLine();

        messageLine.SetMessage(memory);

        MessageContainer.AddChild(messageLine);

        return messageLine;
    }

    public void UpdateMessages(ParrotMessagesEui eui, List<ExtendedPlayerMessage> parrotMemories)
    {
        Initialized = true;

        UpdateMessageCountText(parrotMemories.Count);

        MessageContainer.RemoveAllChildren();

        foreach (var memory in parrotMemories)
        {
            var messageLine = AddMessageLine(memory);

            messageLine.ParrotBlockButton.OnPressed += (_) =>
            {
                eui.ChangeMessageBlock(memory.MessageId, !memory.Blocked);
                MessageContainer.RemoveChild(messageLine);
                UpdateMessageCountText(_messageCount - 1);
            };

            // default text and tooltip refer to unblocked messages
            if (!memory.Blocked)
                continue;

            messageLine.ParrotBlockButton.Text = Loc.GetString("parrot-messages-line-unblock");
            messageLine.ParrotBlockButton.ToolTip = Loc.GetString("parrot-messages-line-unblock-tooltip");
        }
    }
}
